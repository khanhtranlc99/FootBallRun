//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Universal Render Pipeline/Autodesk Interactive/Autodesk Interactive Transparent" {
Properties {
[ToggleUI] _UseColorMap ("UseColorMap", Float) = 0
_Color ("BaseColor", Color) = (0,0,0,0)
_MainTex ("ColorMap", 2D) = "white" { }
[ToggleUI] _UseNormalMap ("UseNormalMap", Float) = 0
_BumpMap ("NormalMap", 2D) = "white" { }
[ToggleUI] _UseMetallicMap ("UseMetallicMap", Float) = 0
_Metallic ("Metallic", Float) = 0
_MetallicGlossMap ("MetallicMap", 2D) = "white" { }
[ToggleUI] _UseRoughnessMap ("UseRoughnessMap", Float) = 0
_Glossiness ("Roughness", Float) = 0
_SpecGlossMap ("RoughnessMap", 2D) = "white" { }
[ToggleUI] _UseEmissiveMap ("UseEmissiveMap", Float) = 0
_EmissionColor ("Emissive", Color) = (0,0,0,0)
_EmissionMap ("EmissiveMap", 2D) = "white" { }
[ToggleUI] _UseOpacityMap ("UseOpacityMap", Float) = 0
_Opacity ("Opacity", Float) = 1
_UvOffset ("UVOffset", Vector) = (0,0,0,0)
_UvTiling ("UVScale", Vector) = (1,1,0,0)
}
SubShader {
 Tags { "QUEUE" = "Transparent+0" "RenderPipeline" = "UniversalPipeline" "RenderType" = "Transparent" }
 Pass {
  Name "Universal Forward"
  Tags { "LIGHTMODE" = "UniversalForward" "QUEUE" = "Transparent+0" "RenderPipeline" = "UniversalPipeline" "RenderType" = "Transparent" }
  Blend SrcAlpha OneMinusSrcAlpha, One OneMinusSrcAlpha
  ZWrite Off
  GpuProgramID 57683
Program "vp" {
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(4) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(5) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(6) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(8) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
bvec3 u_xlatb6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
vec3 u_xlat14;
bool u_xlatb14;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_28;
float u_xlat40;
mediump float u_xlat16_41;
float u_xlat42;
mediump float u_xlat16_42;
mediump float u_xlat16_43;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);
    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);
    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;
    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_2.x);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat14.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat14.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD0.xxx + u_xlat14.xyz;
    u_xlat14.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat14.xyz;
    u_xlat1.xyz = u_xlat14.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    u_xlat3.xyz = u_xlat1.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat3.xyz = u_xlat1.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat0.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat3.xyz = u_xlat1.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat0.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat1.xyw = u_xlat1.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat1.xy,u_xlat1.w);
    u_xlat0.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_2.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * _MainLightShadowParams.x + u_xlat16_15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=u_xlat1.z);
#else
    u_xlatb1 = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb14 = u_xlat1.z>=1.0;
#endif
    u_xlatb1 = u_xlatb14 || u_xlatb1;
    u_xlat16_2.x = (u_xlatb1) ? 1.0 : u_xlat16_2.x;
    u_xlat16_15.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb1 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
    u_xlat16_28 = u_xlat1.x * unity_WorldTransformParams.w;
    u_xlat1.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat1.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xzy * vec3(u_xlat16_28);
    u_xlat3.y = u_xlat1.x;
    u_xlat3.x = vs_TEXCOORD2.x;
    u_xlat3.z = vs_TEXCOORD1.x;
    u_xlat5.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_6.xyz = texture(_BumpMap, u_xlat5.xy).xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb6.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat8.xyz = (u_xlatb6.x) ? u_xlat16_7.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_7.x = dot(u_xlat8.xyz, u_xlat3.xyz);
    u_xlat3.y = u_xlat1.z;
    u_xlat3.x = vs_TEXCOORD2.y;
    u_xlat3.z = vs_TEXCOORD1.y;
    u_xlat16_7.y = dot(u_xlat8.xyz, u_xlat3.xyz);
    u_xlat1.x = vs_TEXCOORD2.z;
    u_xlat1.z = vs_TEXCOORD1.z;
    u_xlat16_7.z = dot(u_xlat8.xyz, u_xlat1.xyz);
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_9.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat16_0.w, 9.99999975e-05);
    u_xlat16_1.x = dot(u_xlat16_7.xyz, u_xlat16_9.xyz);
    u_xlat16_1.x = u_xlat16_1.x + 0.5;
    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz / vec3(u_xlat16_28);
    u_xlat16_28 = dot(_MainLightPosition.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat16_9.xyz = (-u_xlat16_9.xyz) * u_xlat16_15.xxx + u_xlat16_4.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_9.xyz = (-u_xlat16_4.xyz) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = _MainLightShadowParams.xxx * u_xlat16_9.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = min(u_xlat16_4.xyz, u_xlat16_9.xyz);
    u_xlat1.x = texture(_SpecGlossMap, u_xlat5.xy).x;
    u_xlat1.x = (u_xlatb6.z) ? u_xlat1.x : _Glossiness;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat14.x = texture(_MetallicGlossMap, u_xlat5.xy).x;
    u_xlat14.x = (u_xlatb6.y) ? u_xlat14.x : _Metallic;
    u_xlat16_15.x = (-u_xlat14.x) * 0.959999979 + 0.959999979;
    u_xlat16_41 = (-u_xlat16_15.x) + 1.0;
    u_xlat16_41 = u_xlat1.x + u_xlat16_41;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
    u_xlat16_43 = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat0 = texture(_MainTex, u_xlat5.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat5.xy).xyz;
    u_xlat1.xzw = (bool(u_xlatb1)) ? u_xlat0.xyz : _Color.xyz;
    u_xlat16_9.xyz = u_xlat1.xzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_10.xyz = u_xlat16_15.xxx * u_xlat1.xzw;
    u_xlat16_9.xyz = u_xlat14.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.xyz = vec3(u_xlat16_41) + (-u_xlat16_9.xyz);
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat1.xxx + _MainLightPosition.xyz;
    u_xlat16_15.x = dot(u_xlat16_7.xyz, u_xlat14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.x = min(max(u_xlat16_15.x, 0.0), 1.0);
#else
    u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);
#endif
    u_xlat16_15.x = (-u_xlat16_15.x) + 1.0;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_11.xyz = u_xlat16_15.xxx * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_15.x = dot((-u_xlat14.xyz), u_xlat16_7.xyz);
    u_xlat16_15.x = u_xlat16_15.x + u_xlat16_15.x;
    u_xlat16_12.xyz = u_xlat16_7.xyz * (-u_xlat16_15.xxx) + (-u_xlat14.xyz);
    u_xlat16_15.x = (-u_xlat16_43) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_43;
    u_xlat16_15.z = u_xlat16_43 * u_xlat16_43;
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_1.w + -1.0;
    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
    u_xlat16_15.xz = max(u_xlat16_15.xz, vec2(0.0, 6.10351563e-05));
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.y;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
    u_xlat16_12.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
    u_xlat16_15.x = u_xlat16_15.z * u_xlat16_15.z + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_1.xyz = u_xlat16_12.xyz * u_xlat16_15.xxx;
    u_xlat16_1.xyz = u_xlat16_11.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_10.xyz + u_xlat16_1.xyz;
    u_xlat40 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat40;
    u_xlat16_2.x = u_xlat16_28 * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;
    u_xlat40 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat40 = max(u_xlat40, 1.17549435e-38);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat5.xyz = vec3(u_xlat40) * u_xlat5.xyz;
    u_xlat40 = dot(u_xlat16_7.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat40 = min(max(u_xlat40, 0.0), 1.0);
#else
    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
#endif
    u_xlat42 = dot(_MainLightPosition.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat42 * u_xlat42;
    u_xlat16_42 = max(u_xlat16_4.x, 0.100000001);
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat16_5 = u_xlat16_15.z * u_xlat16_15.z + -1.0;
    u_xlat40 = u_xlat40 * u_xlat16_5 + 1.00001001;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat40 = u_xlat16_42 * u_xlat40;
    u_xlat16_42 = u_xlat16_15.z * 4.0 + 2.0;
    u_xlat16_41 = u_xlat16_15.z * u_xlat16_15.z;
    u_xlat40 = u_xlat40 * u_xlat16_42;
    u_xlat40 = u_xlat16_41 / u_xlat40;
    u_xlat16_41 = u_xlat40 + -6.10351563e-05;
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat16_41 = min(u_xlat16_41, 100.0);
    u_xlat16_4.xyz = vec3(u_xlat16_41) * u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_2.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat1.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat1.x = (u_xlatb1) ? u_xlat0.w : _Opacity;
    SV_TARGET0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(4) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(5) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(6) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(8) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
bvec3 u_xlatb6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
vec3 u_xlat14;
bool u_xlatb14;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_28;
float u_xlat40;
mediump float u_xlat16_41;
float u_xlat42;
mediump float u_xlat16_42;
mediump float u_xlat16_43;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);
    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);
    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;
    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_2.x);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat14.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat14.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD0.xxx + u_xlat14.xyz;
    u_xlat14.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat14.xyz;
    u_xlat1.xyz = u_xlat14.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    u_xlat3.xyz = u_xlat1.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat3.xyz = u_xlat1.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat0.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat3.xyz = u_xlat1.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat0.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat1.xyw = u_xlat1.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat1.xy,u_xlat1.w);
    u_xlat0.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_2.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * _MainLightShadowParams.x + u_xlat16_15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=u_xlat1.z);
#else
    u_xlatb1 = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb14 = u_xlat1.z>=1.0;
#endif
    u_xlatb1 = u_xlatb14 || u_xlatb1;
    u_xlat16_2.x = (u_xlatb1) ? 1.0 : u_xlat16_2.x;
    u_xlat16_15.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb1 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
    u_xlat16_28 = u_xlat1.x * unity_WorldTransformParams.w;
    u_xlat1.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat1.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xzy * vec3(u_xlat16_28);
    u_xlat3.y = u_xlat1.x;
    u_xlat3.x = vs_TEXCOORD2.x;
    u_xlat3.z = vs_TEXCOORD1.x;
    u_xlat5.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_6.xyz = texture(_BumpMap, u_xlat5.xy).xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb6.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat8.xyz = (u_xlatb6.x) ? u_xlat16_7.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_7.x = dot(u_xlat8.xyz, u_xlat3.xyz);
    u_xlat3.y = u_xlat1.z;
    u_xlat3.x = vs_TEXCOORD2.y;
    u_xlat3.z = vs_TEXCOORD1.y;
    u_xlat16_7.y = dot(u_xlat8.xyz, u_xlat3.xyz);
    u_xlat1.x = vs_TEXCOORD2.z;
    u_xlat1.z = vs_TEXCOORD1.z;
    u_xlat16_7.z = dot(u_xlat8.xyz, u_xlat1.xyz);
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_9.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat16_0.w, 9.99999975e-05);
    u_xlat16_1.x = dot(u_xlat16_7.xyz, u_xlat16_9.xyz);
    u_xlat16_1.x = u_xlat16_1.x + 0.5;
    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz / vec3(u_xlat16_28);
    u_xlat16_28 = dot(_MainLightPosition.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat16_9.xyz = (-u_xlat16_9.xyz) * u_xlat16_15.xxx + u_xlat16_4.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_9.xyz = (-u_xlat16_4.xyz) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = _MainLightShadowParams.xxx * u_xlat16_9.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = min(u_xlat16_4.xyz, u_xlat16_9.xyz);
    u_xlat1.x = texture(_SpecGlossMap, u_xlat5.xy).x;
    u_xlat1.x = (u_xlatb6.z) ? u_xlat1.x : _Glossiness;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat14.x = texture(_MetallicGlossMap, u_xlat5.xy).x;
    u_xlat14.x = (u_xlatb6.y) ? u_xlat14.x : _Metallic;
    u_xlat16_15.x = (-u_xlat14.x) * 0.959999979 + 0.959999979;
    u_xlat16_41 = (-u_xlat16_15.x) + 1.0;
    u_xlat16_41 = u_xlat1.x + u_xlat16_41;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
    u_xlat16_43 = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat0 = texture(_MainTex, u_xlat5.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat5.xy).xyz;
    u_xlat1.xzw = (bool(u_xlatb1)) ? u_xlat0.xyz : _Color.xyz;
    u_xlat16_9.xyz = u_xlat1.xzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_10.xyz = u_xlat16_15.xxx * u_xlat1.xzw;
    u_xlat16_9.xyz = u_xlat14.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.xyz = vec3(u_xlat16_41) + (-u_xlat16_9.xyz);
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat1.xxx + _MainLightPosition.xyz;
    u_xlat16_15.x = dot(u_xlat16_7.xyz, u_xlat14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.x = min(max(u_xlat16_15.x, 0.0), 1.0);
#else
    u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);
#endif
    u_xlat16_15.x = (-u_xlat16_15.x) + 1.0;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_11.xyz = u_xlat16_15.xxx * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_15.x = dot((-u_xlat14.xyz), u_xlat16_7.xyz);
    u_xlat16_15.x = u_xlat16_15.x + u_xlat16_15.x;
    u_xlat16_12.xyz = u_xlat16_7.xyz * (-u_xlat16_15.xxx) + (-u_xlat14.xyz);
    u_xlat16_15.x = (-u_xlat16_43) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_43;
    u_xlat16_15.z = u_xlat16_43 * u_xlat16_43;
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_1.w + -1.0;
    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
    u_xlat16_15.xz = max(u_xlat16_15.xz, vec2(0.0, 6.10351563e-05));
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.y;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
    u_xlat16_12.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
    u_xlat16_15.x = u_xlat16_15.z * u_xlat16_15.z + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_1.xyz = u_xlat16_12.xyz * u_xlat16_15.xxx;
    u_xlat16_1.xyz = u_xlat16_11.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_10.xyz + u_xlat16_1.xyz;
    u_xlat40 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat40;
    u_xlat16_2.x = u_xlat16_28 * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;
    u_xlat40 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat40 = max(u_xlat40, 1.17549435e-38);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat5.xyz = vec3(u_xlat40) * u_xlat5.xyz;
    u_xlat40 = dot(u_xlat16_7.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat40 = min(max(u_xlat40, 0.0), 1.0);
#else
    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
#endif
    u_xlat42 = dot(_MainLightPosition.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat42 * u_xlat42;
    u_xlat16_42 = max(u_xlat16_4.x, 0.100000001);
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat16_5 = u_xlat16_15.z * u_xlat16_15.z + -1.0;
    u_xlat40 = u_xlat40 * u_xlat16_5 + 1.00001001;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat40 = u_xlat16_42 * u_xlat40;
    u_xlat16_42 = u_xlat16_15.z * 4.0 + 2.0;
    u_xlat16_41 = u_xlat16_15.z * u_xlat16_15.z;
    u_xlat40 = u_xlat40 * u_xlat16_42;
    u_xlat40 = u_xlat16_41 / u_xlat40;
    u_xlat16_41 = u_xlat40 + -6.10351563e-05;
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat16_41 = min(u_xlat16_41, 100.0);
    u_xlat16_4.xyz = vec3(u_xlat16_41) * u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_2.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat1.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat1.x = (u_xlatb1) ? u_xlat0.w : _Opacity;
    SV_TARGET0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(4) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(5) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(6) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(8) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
bvec3 u_xlatb6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
vec3 u_xlat14;
bool u_xlatb14;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_28;
float u_xlat40;
mediump float u_xlat16_41;
float u_xlat42;
mediump float u_xlat16_42;
mediump float u_xlat16_43;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);
    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);
    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;
    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_2.x);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat14.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat14.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD0.xxx + u_xlat14.xyz;
    u_xlat14.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat14.xyz;
    u_xlat1.xyz = u_xlat14.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
    u_xlat3.xyz = u_xlat1.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat3.xyz = u_xlat1.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat0.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat3.xyz = u_xlat1.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat0.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat1.xyw = u_xlat1.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat1.xy,u_xlat1.w);
    u_xlat0.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_2.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * _MainLightShadowParams.x + u_xlat16_15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=u_xlat1.z);
#else
    u_xlatb1 = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb14 = u_xlat1.z>=1.0;
#endif
    u_xlatb1 = u_xlatb14 || u_xlatb1;
    u_xlat16_2.x = (u_xlatb1) ? 1.0 : u_xlat16_2.x;
    u_xlat16_15.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb1 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
    u_xlat16_28 = u_xlat1.x * unity_WorldTransformParams.w;
    u_xlat1.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat1.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xzy * vec3(u_xlat16_28);
    u_xlat3.y = u_xlat1.x;
    u_xlat3.x = vs_TEXCOORD2.x;
    u_xlat3.z = vs_TEXCOORD1.x;
    u_xlat5.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_6.xyz = texture(_BumpMap, u_xlat5.xy).xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb6.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat8.xyz = (u_xlatb6.x) ? u_xlat16_7.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_7.x = dot(u_xlat8.xyz, u_xlat3.xyz);
    u_xlat3.y = u_xlat1.z;
    u_xlat3.x = vs_TEXCOORD2.y;
    u_xlat3.z = vs_TEXCOORD1.y;
    u_xlat16_7.y = dot(u_xlat8.xyz, u_xlat3.xyz);
    u_xlat1.x = vs_TEXCOORD2.z;
    u_xlat1.z = vs_TEXCOORD1.z;
    u_xlat16_7.z = dot(u_xlat8.xyz, u_xlat1.xyz);
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_9.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat16_0.w, 9.99999975e-05);
    u_xlat16_1.x = dot(u_xlat16_7.xyz, u_xlat16_9.xyz);
    u_xlat16_1.x = u_xlat16_1.x + 0.5;
    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz / vec3(u_xlat16_28);
    u_xlat16_28 = dot(_MainLightPosition.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat16_9.xyz = (-u_xlat16_9.xyz) * u_xlat16_15.xxx + u_xlat16_4.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_9.xyz = (-u_xlat16_4.xyz) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = _MainLightShadowParams.xxx * u_xlat16_9.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = min(u_xlat16_4.xyz, u_xlat16_9.xyz);
    u_xlat1.x = texture(_SpecGlossMap, u_xlat5.xy).x;
    u_xlat1.x = (u_xlatb6.z) ? u_xlat1.x : _Glossiness;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat14.x = texture(_MetallicGlossMap, u_xlat5.xy).x;
    u_xlat14.x = (u_xlatb6.y) ? u_xlat14.x : _Metallic;
    u_xlat16_15.x = (-u_xlat14.x) * 0.959999979 + 0.959999979;
    u_xlat16_41 = (-u_xlat16_15.x) + 1.0;
    u_xlat16_41 = u_xlat1.x + u_xlat16_41;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
    u_xlat16_43 = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat0 = texture(_MainTex, u_xlat5.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat5.xy).xyz;
    u_xlat1.xzw = (bool(u_xlatb1)) ? u_xlat0.xyz : _Color.xyz;
    u_xlat16_9.xyz = u_xlat1.xzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_10.xyz = u_xlat16_15.xxx * u_xlat1.xzw;
    u_xlat16_9.xyz = u_xlat14.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.xyz = vec3(u_xlat16_41) + (-u_xlat16_9.xyz);
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat1.xxx + _MainLightPosition.xyz;
    u_xlat16_15.x = dot(u_xlat16_7.xyz, u_xlat14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.x = min(max(u_xlat16_15.x, 0.0), 1.0);
#else
    u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);
#endif
    u_xlat16_15.x = (-u_xlat16_15.x) + 1.0;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_11.xyz = u_xlat16_15.xxx * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_15.x = dot((-u_xlat14.xyz), u_xlat16_7.xyz);
    u_xlat16_15.x = u_xlat16_15.x + u_xlat16_15.x;
    u_xlat16_12.xyz = u_xlat16_7.xyz * (-u_xlat16_15.xxx) + (-u_xlat14.xyz);
    u_xlat16_15.x = (-u_xlat16_43) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_43;
    u_xlat16_15.z = u_xlat16_43 * u_xlat16_43;
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_1.w + -1.0;
    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
    u_xlat16_15.xz = max(u_xlat16_15.xz, vec2(0.0, 6.10351563e-05));
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.y;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
    u_xlat16_12.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
    u_xlat16_15.x = u_xlat16_15.z * u_xlat16_15.z + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_1.xyz = u_xlat16_12.xyz * u_xlat16_15.xxx;
    u_xlat16_1.xyz = u_xlat16_11.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_10.xyz + u_xlat16_1.xyz;
    u_xlat40 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat40;
    u_xlat16_2.x = u_xlat16_28 * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;
    u_xlat40 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat40 = max(u_xlat40, 1.17549435e-38);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat5.xyz = vec3(u_xlat40) * u_xlat5.xyz;
    u_xlat40 = dot(u_xlat16_7.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat40 = min(max(u_xlat40, 0.0), 1.0);
#else
    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
#endif
    u_xlat42 = dot(_MainLightPosition.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat42 * u_xlat42;
    u_xlat16_42 = max(u_xlat16_4.x, 0.100000001);
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat16_5 = u_xlat16_15.z * u_xlat16_15.z + -1.0;
    u_xlat40 = u_xlat40 * u_xlat16_5 + 1.00001001;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat40 = u_xlat16_42 * u_xlat40;
    u_xlat16_42 = u_xlat16_15.z * 4.0 + 2.0;
    u_xlat16_41 = u_xlat16_15.z * u_xlat16_15.z;
    u_xlat40 = u_xlat40 * u_xlat16_42;
    u_xlat40 = u_xlat16_41 / u_xlat40;
    u_xlat16_41 = u_xlat40 + -6.10351563e-05;
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat16_41 = min(u_xlat16_41, 100.0);
    u_xlat16_4.xyz = vec3(u_xlat16_41) * u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_2.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat1.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat1.x = (u_xlatb1) ? u_xlat0.w : _Opacity;
    SV_TARGET0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_LightmapInd;
uniform lowp sampler2D unity_Lightmap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_13;
mediump float u_xlat16_17;
mediump float u_xlat16_28;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_34;
float u_xlat35;
bool u_xlatb35;
mediump float u_xlat16_39;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_34 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_1.xyz = vec3(u_xlat16_34) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat11.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_34 = dot((-u_xlat11.xyz), u_xlat16_1.xyz);
    u_xlat16_34 = u_xlat16_34 + u_xlat16_34;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_34)) + (-u_xlat11.xyz);
    u_xlat16_34 = dot(u_xlat16_1.xyz, u_xlat11.xyz);
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
    u_xlat16_34 = (-u_xlat16_34) + 1.0;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_39 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_39) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_39 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_39 * u_xlat16_39;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_11.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat35 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat35 = (u_xlatb4.y) ? u_xlat35 : _Metallic;
    u_xlat16_6.x = (-u_xlat35) * 0.959999979 + 0.959999979;
    u_xlat16_17 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_17 = u_xlat0.x + u_xlat16_17;
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat35) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_17) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_34) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_11.xyz * u_xlat16_6.xyz;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    u_xlat33 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb33 = u_xlat33<u_xlat4.z;
    u_xlat5.x = (u_xlatb33) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    u_xlat33 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb33 = u_xlat33<u_xlat4.z;
    u_xlat5.y = (u_xlatb33) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    u_xlat33 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb33 = u_xlat33<u_xlat4.z;
    u_xlat5.z = (u_xlatb33) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    u_xlat33 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb33 = u_xlat33<u_xlat4.z;
    u_xlat5.w = (u_xlatb33) ? 0.0 : 1.0;
    u_xlat16_34 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_34 = u_xlat16_34 * _MainLightShadowParams.x + u_xlat16_6.x;
    u_xlatb33 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb35 = vs_TEXCOORD8.z>=1.0;
    u_xlatb33 = u_xlatb33 || u_xlatb35;
    u_xlat16_34 = (u_xlatb33) ? 1.0 : u_xlat16_34;
    u_xlat16_6.x = (-u_xlat16_34) + 1.0;
    u_xlat16_17 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
    u_xlat16_9.xyz = vec3(u_xlat16_17) * _MainLightColor.xyz;
    u_xlat10_5 = texture2D(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_10.xyz = u_xlat10_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat10_5.w, 9.99999975e-05);
    u_xlat16_33 = dot(u_xlat16_1.xyz, u_xlat16_10.xyz);
    u_xlat16_33 = u_xlat16_33 + 0.5;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_10.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_10.xyz = vec3(u_xlat16_33) * u_xlat16_10.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz / vec3(u_xlat16_28);
    u_xlat16_9.xyz = (-u_xlat16_9.xyz) * u_xlat16_6.xxx + u_xlat16_10.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_9.xyz = (-u_xlat16_10.xyz) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = _MainLightShadowParams.xxx * u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_9.xyz = min(u_xlat16_9.xyz, u_xlat16_10.xyz);
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = max(u_xlat33, 1.17549435e-38);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz;
    u_xlat33 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat16_13 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat33 = u_xlat33 * u_xlat16_13 + 1.00001001;
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat33 = u_xlat16_2 * u_xlat33;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat33 = u_xlat33 * u_xlat16_2;
    u_xlat33 = u_xlat16_1.x / u_xlat33;
    u_xlat16_1.x = u_xlat33 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat33 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_34 = u_xlat16_34 * u_xlat33;
    u_xlat16_34 = u_xlat16_17 * u_xlat16_34;
    u_xlat16_6.xyz = vec3(u_xlat16_34) * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_LightmapInd;
uniform lowp sampler2D unity_Lightmap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_13;
mediump float u_xlat16_17;
mediump float u_xlat16_28;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_34;
float u_xlat35;
bool u_xlatb35;
mediump float u_xlat16_39;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_34 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_1.xyz = vec3(u_xlat16_34) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat11.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_34 = dot((-u_xlat11.xyz), u_xlat16_1.xyz);
    u_xlat16_34 = u_xlat16_34 + u_xlat16_34;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_34)) + (-u_xlat11.xyz);
    u_xlat16_34 = dot(u_xlat16_1.xyz, u_xlat11.xyz);
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
    u_xlat16_34 = (-u_xlat16_34) + 1.0;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_39 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_39) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_39 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_39 * u_xlat16_39;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_11.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat35 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat35 = (u_xlatb4.y) ? u_xlat35 : _Metallic;
    u_xlat16_6.x = (-u_xlat35) * 0.959999979 + 0.959999979;
    u_xlat16_17 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_17 = u_xlat0.x + u_xlat16_17;
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat35) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_17) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_34) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_11.xyz * u_xlat16_6.xyz;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    u_xlat33 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb33 = u_xlat33<u_xlat4.z;
    u_xlat5.x = (u_xlatb33) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    u_xlat33 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb33 = u_xlat33<u_xlat4.z;
    u_xlat5.y = (u_xlatb33) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    u_xlat33 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb33 = u_xlat33<u_xlat4.z;
    u_xlat5.z = (u_xlatb33) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    u_xlat33 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb33 = u_xlat33<u_xlat4.z;
    u_xlat5.w = (u_xlatb33) ? 0.0 : 1.0;
    u_xlat16_34 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_34 = u_xlat16_34 * _MainLightShadowParams.x + u_xlat16_6.x;
    u_xlatb33 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb35 = vs_TEXCOORD8.z>=1.0;
    u_xlatb33 = u_xlatb33 || u_xlatb35;
    u_xlat16_34 = (u_xlatb33) ? 1.0 : u_xlat16_34;
    u_xlat16_6.x = (-u_xlat16_34) + 1.0;
    u_xlat16_17 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
    u_xlat16_9.xyz = vec3(u_xlat16_17) * _MainLightColor.xyz;
    u_xlat10_5 = texture2D(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_10.xyz = u_xlat10_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat10_5.w, 9.99999975e-05);
    u_xlat16_33 = dot(u_xlat16_1.xyz, u_xlat16_10.xyz);
    u_xlat16_33 = u_xlat16_33 + 0.5;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_10.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_10.xyz = vec3(u_xlat16_33) * u_xlat16_10.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz / vec3(u_xlat16_28);
    u_xlat16_9.xyz = (-u_xlat16_9.xyz) * u_xlat16_6.xxx + u_xlat16_10.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_9.xyz = (-u_xlat16_10.xyz) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = _MainLightShadowParams.xxx * u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_9.xyz = min(u_xlat16_9.xyz, u_xlat16_10.xyz);
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = max(u_xlat33, 1.17549435e-38);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz;
    u_xlat33 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat16_13 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat33 = u_xlat33 * u_xlat16_13 + 1.00001001;
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat33 = u_xlat16_2 * u_xlat33;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat33 = u_xlat33 * u_xlat16_2;
    u_xlat33 = u_xlat16_1.x / u_xlat33;
    u_xlat16_1.x = u_xlat33 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat33 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_34 = u_xlat16_34 * u_xlat33;
    u_xlat16_34 = u_xlat16_17 * u_xlat16_34;
    u_xlat16_6.xyz = vec3(u_xlat16_34) * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_LightmapInd;
uniform lowp sampler2D unity_Lightmap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_13;
mediump float u_xlat16_17;
mediump float u_xlat16_28;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_34;
float u_xlat35;
bool u_xlatb35;
mediump float u_xlat16_39;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_34 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_1.xyz = vec3(u_xlat16_34) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat11.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_34 = dot((-u_xlat11.xyz), u_xlat16_1.xyz);
    u_xlat16_34 = u_xlat16_34 + u_xlat16_34;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_34)) + (-u_xlat11.xyz);
    u_xlat16_34 = dot(u_xlat16_1.xyz, u_xlat11.xyz);
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
    u_xlat16_34 = (-u_xlat16_34) + 1.0;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_39 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_39) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_39 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_39 * u_xlat16_39;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_11.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat35 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat35 = (u_xlatb4.y) ? u_xlat35 : _Metallic;
    u_xlat16_6.x = (-u_xlat35) * 0.959999979 + 0.959999979;
    u_xlat16_17 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_17 = u_xlat0.x + u_xlat16_17;
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat35) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_17) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_34) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_11.xyz * u_xlat16_6.xyz;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    u_xlat33 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb33 = u_xlat33<u_xlat4.z;
    u_xlat5.x = (u_xlatb33) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    u_xlat33 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb33 = u_xlat33<u_xlat4.z;
    u_xlat5.y = (u_xlatb33) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    u_xlat33 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb33 = u_xlat33<u_xlat4.z;
    u_xlat5.z = (u_xlatb33) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    u_xlat33 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb33 = u_xlat33<u_xlat4.z;
    u_xlat5.w = (u_xlatb33) ? 0.0 : 1.0;
    u_xlat16_34 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_34 = u_xlat16_34 * _MainLightShadowParams.x + u_xlat16_6.x;
    u_xlatb33 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb35 = vs_TEXCOORD8.z>=1.0;
    u_xlatb33 = u_xlatb33 || u_xlatb35;
    u_xlat16_34 = (u_xlatb33) ? 1.0 : u_xlat16_34;
    u_xlat16_6.x = (-u_xlat16_34) + 1.0;
    u_xlat16_17 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
    u_xlat16_9.xyz = vec3(u_xlat16_17) * _MainLightColor.xyz;
    u_xlat10_5 = texture2D(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_10.xyz = u_xlat10_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat10_5.w, 9.99999975e-05);
    u_xlat16_33 = dot(u_xlat16_1.xyz, u_xlat16_10.xyz);
    u_xlat16_33 = u_xlat16_33 + 0.5;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_10.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_10.xyz = vec3(u_xlat16_33) * u_xlat16_10.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz / vec3(u_xlat16_28);
    u_xlat16_9.xyz = (-u_xlat16_9.xyz) * u_xlat16_6.xxx + u_xlat16_10.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_9.xyz = (-u_xlat16_10.xyz) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = _MainLightShadowParams.xxx * u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_9.xyz = min(u_xlat16_9.xyz, u_xlat16_10.xyz);
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = max(u_xlat33, 1.17549435e-38);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz;
    u_xlat33 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat16_13 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat33 = u_xlat33 * u_xlat16_13 + 1.00001001;
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat33 = u_xlat16_2 * u_xlat33;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat33 = u_xlat33 * u_xlat16_2;
    u_xlat33 = u_xlat16_1.x / u_xlat33;
    u_xlat16_1.x = u_xlat33 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat33 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_34 = u_xlat16_34 * u_xlat33;
    u_xlat16_34 = u_xlat16_17 * u_xlat16_34;
    u_xlat16_6.xyz = vec3(u_xlat16_34) * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(4) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(5) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(6) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(8) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
mediump float u_xlat16_30;
int u_xlati30;
uint u_xlatu30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_5 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat16_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_31 = max(u_xlat16_5.w, 9.99999975e-05);
    u_xlat16_30 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_30 = u_xlat16_30 + 0.5;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_30) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_31);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat5.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb5 = lessThan(u_xlat5, _CascadeShadowSplitSphereRadii);
    u_xlat16_6.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_5.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_5.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_5.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlat16_5.w = (u_xlatb5.w) ? float(1.0) : float(0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_5.yzw;
    u_xlat16_5.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_31 = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_31 = (-u_xlat16_31) + 4.0;
    u_xlatu30 = uint(u_xlat16_31);
    u_xlati30 = int(int(u_xlatu30) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati30 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati30].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati30 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati30 + 3)].xyz;
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_31 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_31 = u_xlat16_31 * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb30 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb32 = u_xlat4.z>=1.0;
#endif
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_31 = (u_xlatb30) ? 1.0 : u_xlat16_31;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_31 = u_xlat16_31 * u_xlat30;
    u_xlat16_6.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(4) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(5) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(6) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(8) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
mediump float u_xlat16_30;
int u_xlati30;
uint u_xlatu30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_5 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat16_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_31 = max(u_xlat16_5.w, 9.99999975e-05);
    u_xlat16_30 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_30 = u_xlat16_30 + 0.5;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_30) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_31);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat5.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb5 = lessThan(u_xlat5, _CascadeShadowSplitSphereRadii);
    u_xlat16_6.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_5.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_5.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_5.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlat16_5.w = (u_xlatb5.w) ? float(1.0) : float(0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_5.yzw;
    u_xlat16_5.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_31 = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_31 = (-u_xlat16_31) + 4.0;
    u_xlatu30 = uint(u_xlat16_31);
    u_xlati30 = int(int(u_xlatu30) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati30 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati30].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati30 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati30 + 3)].xyz;
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_31 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_31 = u_xlat16_31 * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb30 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb32 = u_xlat4.z>=1.0;
#endif
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_31 = (u_xlatb30) ? 1.0 : u_xlat16_31;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_31 = u_xlat16_31 * u_xlat30;
    u_xlat16_6.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(4) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(5) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(6) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(8) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
mediump float u_xlat16_30;
int u_xlati30;
uint u_xlatu30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_5 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat16_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_31 = max(u_xlat16_5.w, 9.99999975e-05);
    u_xlat16_30 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_30 = u_xlat16_30 + 0.5;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_30) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_31);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat5.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb5 = lessThan(u_xlat5, _CascadeShadowSplitSphereRadii);
    u_xlat16_6.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_5.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_5.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_5.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlat16_5.w = (u_xlatb5.w) ? float(1.0) : float(0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_5.yzw;
    u_xlat16_5.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_31 = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_31 = (-u_xlat16_31) + 4.0;
    u_xlatu30 = uint(u_xlat16_31);
    u_xlati30 = int(int(u_xlatu30) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati30 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati30].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati30 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati30 + 3)].xyz;
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_31 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_31 = u_xlat16_31 * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb30 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb32 = u_xlat4.z>=1.0;
#endif
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_31 = (u_xlatb30) ? 1.0 : u_xlat16_31;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_31 = u_xlat16_31 * u_xlat30;
    u_xlat16_6.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_LightmapInd;
uniform lowp sampler2D unity_Lightmap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
bool u_xlatb29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat10_5 = texture2D(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat10_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat10_5.w, 9.99999975e-05);
    u_xlat16_27 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_27 = u_xlat16_27 + 0.5;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_28);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat16_28 = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.x = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.y = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.z = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.w = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat16_6.x = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15;
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb29 = vs_TEXCOORD8.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb29;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat27 = u_xlat27 * u_xlat16_11 + 1.00001001;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat16_2 * u_xlat27;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_1.x / u_xlat27;
    u_xlat16_1.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_LightmapInd;
uniform lowp sampler2D unity_Lightmap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
bool u_xlatb29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat10_5 = texture2D(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat10_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat10_5.w, 9.99999975e-05);
    u_xlat16_27 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_27 = u_xlat16_27 + 0.5;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_28);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat16_28 = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.x = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.y = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.z = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.w = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat16_6.x = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15;
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb29 = vs_TEXCOORD8.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb29;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat27 = u_xlat27 * u_xlat16_11 + 1.00001001;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat16_2 * u_xlat27;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_1.x / u_xlat27;
    u_xlat16_1.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_LightmapInd;
uniform lowp sampler2D unity_Lightmap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
bool u_xlatb29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat10_5 = texture2D(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat10_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat10_5.w, 9.99999975e-05);
    u_xlat16_27 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_27 = u_xlat16_27 + 0.5;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_28);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat16_28 = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.x = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.y = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.z = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.w = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat16_6.x = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15;
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb29 = vs_TEXCOORD8.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb29;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat27 = u_xlat27 * u_xlat16_11 + 1.00001001;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat16_2 * u_xlat27;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_1.x / u_xlat27;
    u_xlat16_1.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(4) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(5) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(6) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(8) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
bvec3 u_xlatb6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
vec3 u_xlat14;
bool u_xlatb14;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_28;
float u_xlat40;
bool u_xlatb40;
mediump float u_xlat16_41;
float u_xlat42;
mediump float u_xlat16_42;
mediump float u_xlat16_43;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);
    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);
    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;
    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_2.x);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat14.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat14.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD0.xxx + u_xlat14.xyz;
    u_xlat14.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat14.xyz;
    u_xlat1.xyz = u_xlat14.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb40 = !!(0.0>=u_xlat1.z);
#else
    u_xlatb40 = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb3 = u_xlat1.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb14 = u_xlatb40 || u_xlatb3;
    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_2.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb14) ? 1.0 : u_xlat16_2.x;
    u_xlat16_15.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb1 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
    u_xlat16_28 = u_xlat1.x * unity_WorldTransformParams.w;
    u_xlat1.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat1.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xzy * vec3(u_xlat16_28);
    u_xlat3.y = u_xlat1.x;
    u_xlat3.x = vs_TEXCOORD2.x;
    u_xlat3.z = vs_TEXCOORD1.x;
    u_xlat5.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_6.xyz = texture(_BumpMap, u_xlat5.xy).xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb6.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat8.xyz = (u_xlatb6.x) ? u_xlat16_7.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_7.x = dot(u_xlat8.xyz, u_xlat3.xyz);
    u_xlat3.y = u_xlat1.z;
    u_xlat3.x = vs_TEXCOORD2.y;
    u_xlat3.z = vs_TEXCOORD1.y;
    u_xlat16_7.y = dot(u_xlat8.xyz, u_xlat3.xyz);
    u_xlat1.x = vs_TEXCOORD2.z;
    u_xlat1.z = vs_TEXCOORD1.z;
    u_xlat16_7.z = dot(u_xlat8.xyz, u_xlat1.xyz);
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_9.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat16_0.w, 9.99999975e-05);
    u_xlat16_1.x = dot(u_xlat16_7.xyz, u_xlat16_9.xyz);
    u_xlat16_1.x = u_xlat16_1.x + 0.5;
    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz / vec3(u_xlat16_28);
    u_xlat16_28 = dot(_MainLightPosition.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat16_9.xyz = (-u_xlat16_9.xyz) * u_xlat16_15.xxx + u_xlat16_4.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_9.xyz = (-u_xlat16_4.xyz) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = _MainLightShadowParams.xxx * u_xlat16_9.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = min(u_xlat16_4.xyz, u_xlat16_9.xyz);
    u_xlat1.x = texture(_SpecGlossMap, u_xlat5.xy).x;
    u_xlat1.x = (u_xlatb6.z) ? u_xlat1.x : _Glossiness;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat14.x = texture(_MetallicGlossMap, u_xlat5.xy).x;
    u_xlat14.x = (u_xlatb6.y) ? u_xlat14.x : _Metallic;
    u_xlat16_15.x = (-u_xlat14.x) * 0.959999979 + 0.959999979;
    u_xlat16_41 = (-u_xlat16_15.x) + 1.0;
    u_xlat16_41 = u_xlat1.x + u_xlat16_41;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
    u_xlat16_43 = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat0 = texture(_MainTex, u_xlat5.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat5.xy).xyz;
    u_xlat1.xzw = (bool(u_xlatb1)) ? u_xlat0.xyz : _Color.xyz;
    u_xlat16_9.xyz = u_xlat1.xzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_10.xyz = u_xlat16_15.xxx * u_xlat1.xzw;
    u_xlat16_9.xyz = u_xlat14.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.xyz = vec3(u_xlat16_41) + (-u_xlat16_9.xyz);
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat1.xxx + _MainLightPosition.xyz;
    u_xlat16_15.x = dot(u_xlat16_7.xyz, u_xlat14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.x = min(max(u_xlat16_15.x, 0.0), 1.0);
#else
    u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);
#endif
    u_xlat16_15.x = (-u_xlat16_15.x) + 1.0;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_11.xyz = u_xlat16_15.xxx * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_15.x = dot((-u_xlat14.xyz), u_xlat16_7.xyz);
    u_xlat16_15.x = u_xlat16_15.x + u_xlat16_15.x;
    u_xlat16_12.xyz = u_xlat16_7.xyz * (-u_xlat16_15.xxx) + (-u_xlat14.xyz);
    u_xlat16_15.x = (-u_xlat16_43) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_43;
    u_xlat16_15.z = u_xlat16_43 * u_xlat16_43;
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_1.w + -1.0;
    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
    u_xlat16_15.xz = max(u_xlat16_15.xz, vec2(0.0, 6.10351563e-05));
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.y;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
    u_xlat16_12.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
    u_xlat16_15.x = u_xlat16_15.z * u_xlat16_15.z + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_1.xyz = u_xlat16_12.xyz * u_xlat16_15.xxx;
    u_xlat16_1.xyz = u_xlat16_11.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_10.xyz + u_xlat16_1.xyz;
    u_xlat40 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat40;
    u_xlat16_2.x = u_xlat16_28 * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;
    u_xlat40 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat40 = max(u_xlat40, 1.17549435e-38);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat5.xyz = vec3(u_xlat40) * u_xlat5.xyz;
    u_xlat40 = dot(u_xlat16_7.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat40 = min(max(u_xlat40, 0.0), 1.0);
#else
    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
#endif
    u_xlat42 = dot(_MainLightPosition.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat42 * u_xlat42;
    u_xlat16_42 = max(u_xlat16_4.x, 0.100000001);
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat16_5 = u_xlat16_15.z * u_xlat16_15.z + -1.0;
    u_xlat40 = u_xlat40 * u_xlat16_5 + 1.00001001;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat40 = u_xlat16_42 * u_xlat40;
    u_xlat16_42 = u_xlat16_15.z * 4.0 + 2.0;
    u_xlat16_41 = u_xlat16_15.z * u_xlat16_15.z;
    u_xlat40 = u_xlat40 * u_xlat16_42;
    u_xlat40 = u_xlat16_41 / u_xlat40;
    u_xlat16_41 = u_xlat40 + -6.10351563e-05;
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat16_41 = min(u_xlat16_41, 100.0);
    u_xlat16_4.xyz = vec3(u_xlat16_41) * u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_2.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat1.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat1.x = (u_xlatb1) ? u_xlat0.w : _Opacity;
    SV_TARGET0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(4) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(5) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(6) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(8) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
bvec3 u_xlatb6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
vec3 u_xlat14;
bool u_xlatb14;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_28;
float u_xlat40;
bool u_xlatb40;
mediump float u_xlat16_41;
float u_xlat42;
mediump float u_xlat16_42;
mediump float u_xlat16_43;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);
    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);
    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;
    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_2.x);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat14.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat14.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD0.xxx + u_xlat14.xyz;
    u_xlat14.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat14.xyz;
    u_xlat1.xyz = u_xlat14.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb40 = !!(0.0>=u_xlat1.z);
#else
    u_xlatb40 = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb3 = u_xlat1.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb14 = u_xlatb40 || u_xlatb3;
    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_2.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb14) ? 1.0 : u_xlat16_2.x;
    u_xlat16_15.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb1 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
    u_xlat16_28 = u_xlat1.x * unity_WorldTransformParams.w;
    u_xlat1.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat1.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xzy * vec3(u_xlat16_28);
    u_xlat3.y = u_xlat1.x;
    u_xlat3.x = vs_TEXCOORD2.x;
    u_xlat3.z = vs_TEXCOORD1.x;
    u_xlat5.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_6.xyz = texture(_BumpMap, u_xlat5.xy).xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb6.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat8.xyz = (u_xlatb6.x) ? u_xlat16_7.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_7.x = dot(u_xlat8.xyz, u_xlat3.xyz);
    u_xlat3.y = u_xlat1.z;
    u_xlat3.x = vs_TEXCOORD2.y;
    u_xlat3.z = vs_TEXCOORD1.y;
    u_xlat16_7.y = dot(u_xlat8.xyz, u_xlat3.xyz);
    u_xlat1.x = vs_TEXCOORD2.z;
    u_xlat1.z = vs_TEXCOORD1.z;
    u_xlat16_7.z = dot(u_xlat8.xyz, u_xlat1.xyz);
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_9.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat16_0.w, 9.99999975e-05);
    u_xlat16_1.x = dot(u_xlat16_7.xyz, u_xlat16_9.xyz);
    u_xlat16_1.x = u_xlat16_1.x + 0.5;
    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz / vec3(u_xlat16_28);
    u_xlat16_28 = dot(_MainLightPosition.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat16_9.xyz = (-u_xlat16_9.xyz) * u_xlat16_15.xxx + u_xlat16_4.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_9.xyz = (-u_xlat16_4.xyz) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = _MainLightShadowParams.xxx * u_xlat16_9.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = min(u_xlat16_4.xyz, u_xlat16_9.xyz);
    u_xlat1.x = texture(_SpecGlossMap, u_xlat5.xy).x;
    u_xlat1.x = (u_xlatb6.z) ? u_xlat1.x : _Glossiness;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat14.x = texture(_MetallicGlossMap, u_xlat5.xy).x;
    u_xlat14.x = (u_xlatb6.y) ? u_xlat14.x : _Metallic;
    u_xlat16_15.x = (-u_xlat14.x) * 0.959999979 + 0.959999979;
    u_xlat16_41 = (-u_xlat16_15.x) + 1.0;
    u_xlat16_41 = u_xlat1.x + u_xlat16_41;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
    u_xlat16_43 = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat0 = texture(_MainTex, u_xlat5.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat5.xy).xyz;
    u_xlat1.xzw = (bool(u_xlatb1)) ? u_xlat0.xyz : _Color.xyz;
    u_xlat16_9.xyz = u_xlat1.xzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_10.xyz = u_xlat16_15.xxx * u_xlat1.xzw;
    u_xlat16_9.xyz = u_xlat14.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.xyz = vec3(u_xlat16_41) + (-u_xlat16_9.xyz);
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat1.xxx + _MainLightPosition.xyz;
    u_xlat16_15.x = dot(u_xlat16_7.xyz, u_xlat14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.x = min(max(u_xlat16_15.x, 0.0), 1.0);
#else
    u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);
#endif
    u_xlat16_15.x = (-u_xlat16_15.x) + 1.0;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_11.xyz = u_xlat16_15.xxx * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_15.x = dot((-u_xlat14.xyz), u_xlat16_7.xyz);
    u_xlat16_15.x = u_xlat16_15.x + u_xlat16_15.x;
    u_xlat16_12.xyz = u_xlat16_7.xyz * (-u_xlat16_15.xxx) + (-u_xlat14.xyz);
    u_xlat16_15.x = (-u_xlat16_43) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_43;
    u_xlat16_15.z = u_xlat16_43 * u_xlat16_43;
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_1.w + -1.0;
    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
    u_xlat16_15.xz = max(u_xlat16_15.xz, vec2(0.0, 6.10351563e-05));
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.y;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
    u_xlat16_12.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
    u_xlat16_15.x = u_xlat16_15.z * u_xlat16_15.z + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_1.xyz = u_xlat16_12.xyz * u_xlat16_15.xxx;
    u_xlat16_1.xyz = u_xlat16_11.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_10.xyz + u_xlat16_1.xyz;
    u_xlat40 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat40;
    u_xlat16_2.x = u_xlat16_28 * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;
    u_xlat40 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat40 = max(u_xlat40, 1.17549435e-38);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat5.xyz = vec3(u_xlat40) * u_xlat5.xyz;
    u_xlat40 = dot(u_xlat16_7.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat40 = min(max(u_xlat40, 0.0), 1.0);
#else
    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
#endif
    u_xlat42 = dot(_MainLightPosition.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat42 * u_xlat42;
    u_xlat16_42 = max(u_xlat16_4.x, 0.100000001);
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat16_5 = u_xlat16_15.z * u_xlat16_15.z + -1.0;
    u_xlat40 = u_xlat40 * u_xlat16_5 + 1.00001001;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat40 = u_xlat16_42 * u_xlat40;
    u_xlat16_42 = u_xlat16_15.z * 4.0 + 2.0;
    u_xlat16_41 = u_xlat16_15.z * u_xlat16_15.z;
    u_xlat40 = u_xlat40 * u_xlat16_42;
    u_xlat40 = u_xlat16_41 / u_xlat40;
    u_xlat16_41 = u_xlat40 + -6.10351563e-05;
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat16_41 = min(u_xlat16_41, 100.0);
    u_xlat16_4.xyz = vec3(u_xlat16_41) * u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_2.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat1.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat1.x = (u_xlatb1) ? u_xlat0.w : _Opacity;
    SV_TARGET0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(4) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(5) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(6) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(8) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
uint u_xlatu1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
bvec3 u_xlatb6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
vec3 u_xlat14;
bool u_xlatb14;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_28;
float u_xlat40;
bool u_xlatb40;
mediump float u_xlat16_41;
float u_xlat42;
mediump float u_xlat16_42;
mediump float u_xlat16_43;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);
    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);
    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;
    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;
    u_xlatu1 = uint(u_xlat16_2.x);
    u_xlati1 = int(int(u_xlatu1) << 2);
    u_xlat14.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;
    u_xlat14.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD0.xxx + u_xlat14.xyz;
    u_xlat14.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat14.xyz;
    u_xlat1.xyz = u_xlat14.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb40 = !!(0.0>=u_xlat1.z);
#else
    u_xlatb40 = 0.0>=u_xlat1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat1.z>=1.0);
#else
    u_xlatb3 = u_xlat1.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb14 = u_xlatb40 || u_xlatb3;
    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_2.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb14) ? 1.0 : u_xlat16_2.x;
    u_xlat16_15.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb1 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
    u_xlat16_28 = u_xlat1.x * unity_WorldTransformParams.w;
    u_xlat1.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat1.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xzy * vec3(u_xlat16_28);
    u_xlat3.y = u_xlat1.x;
    u_xlat3.x = vs_TEXCOORD2.x;
    u_xlat3.z = vs_TEXCOORD1.x;
    u_xlat5.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_6.xyz = texture(_BumpMap, u_xlat5.xy).xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb6.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat8.xyz = (u_xlatb6.x) ? u_xlat16_7.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_7.x = dot(u_xlat8.xyz, u_xlat3.xyz);
    u_xlat3.y = u_xlat1.z;
    u_xlat3.x = vs_TEXCOORD2.y;
    u_xlat3.z = vs_TEXCOORD1.y;
    u_xlat16_7.y = dot(u_xlat8.xyz, u_xlat3.xyz);
    u_xlat1.x = vs_TEXCOORD2.z;
    u_xlat1.z = vs_TEXCOORD1.z;
    u_xlat16_7.z = dot(u_xlat8.xyz, u_xlat1.xyz);
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_0 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_9.xyz = u_xlat16_0.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat16_0.w, 9.99999975e-05);
    u_xlat16_1.x = dot(u_xlat16_7.xyz, u_xlat16_9.xyz);
    u_xlat16_1.x = u_xlat16_1.x + 0.5;
    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz / vec3(u_xlat16_28);
    u_xlat16_28 = dot(_MainLightPosition.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat16_9.xyz = (-u_xlat16_9.xyz) * u_xlat16_15.xxx + u_xlat16_4.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_9.xyz = (-u_xlat16_4.xyz) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = _MainLightShadowParams.xxx * u_xlat16_9.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = min(u_xlat16_4.xyz, u_xlat16_9.xyz);
    u_xlat1.x = texture(_SpecGlossMap, u_xlat5.xy).x;
    u_xlat1.x = (u_xlatb6.z) ? u_xlat1.x : _Glossiness;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat14.x = texture(_MetallicGlossMap, u_xlat5.xy).x;
    u_xlat14.x = (u_xlatb6.y) ? u_xlat14.x : _Metallic;
    u_xlat16_15.x = (-u_xlat14.x) * 0.959999979 + 0.959999979;
    u_xlat16_41 = (-u_xlat16_15.x) + 1.0;
    u_xlat16_41 = u_xlat1.x + u_xlat16_41;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
#else
    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
#endif
    u_xlat16_43 = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat0 = texture(_MainTex, u_xlat5.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat5.xy).xyz;
    u_xlat1.xzw = (bool(u_xlatb1)) ? u_xlat0.xyz : _Color.xyz;
    u_xlat16_9.xyz = u_xlat1.xzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_10.xyz = u_xlat16_15.xxx * u_xlat1.xzw;
    u_xlat16_9.xyz = u_xlat14.xxx * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_11.xyz = vec3(u_xlat16_41) + (-u_xlat16_9.xyz);
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat1.xxx + _MainLightPosition.xyz;
    u_xlat16_15.x = dot(u_xlat16_7.xyz, u_xlat14.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.x = min(max(u_xlat16_15.x, 0.0), 1.0);
#else
    u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);
#endif
    u_xlat16_15.x = (-u_xlat16_15.x) + 1.0;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_15.x;
    u_xlat16_11.xyz = u_xlat16_15.xxx * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_15.x = dot((-u_xlat14.xyz), u_xlat16_7.xyz);
    u_xlat16_15.x = u_xlat16_15.x + u_xlat16_15.x;
    u_xlat16_12.xyz = u_xlat16_7.xyz * (-u_xlat16_15.xxx) + (-u_xlat14.xyz);
    u_xlat16_15.x = (-u_xlat16_43) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_43;
    u_xlat16_15.z = u_xlat16_43 * u_xlat16_43;
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_1.w + -1.0;
    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
    u_xlat16_15.xz = max(u_xlat16_15.xz, vec2(0.0, 6.10351563e-05));
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.y;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
    u_xlat16_12.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
    u_xlat16_15.x = u_xlat16_15.z * u_xlat16_15.z + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_1.xyz = u_xlat16_12.xyz * u_xlat16_15.xxx;
    u_xlat16_1.xyz = u_xlat16_11.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_10.xyz + u_xlat16_1.xyz;
    u_xlat40 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat40;
    u_xlat16_2.x = u_xlat16_28 * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;
    u_xlat40 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat40 = max(u_xlat40, 1.17549435e-38);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat5.xyz = vec3(u_xlat40) * u_xlat5.xyz;
    u_xlat40 = dot(u_xlat16_7.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat40 = min(max(u_xlat40, 0.0), 1.0);
#else
    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
#endif
    u_xlat42 = dot(_MainLightPosition.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat42 * u_xlat42;
    u_xlat16_42 = max(u_xlat16_4.x, 0.100000001);
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat16_5 = u_xlat16_15.z * u_xlat16_15.z + -1.0;
    u_xlat40 = u_xlat40 * u_xlat16_5 + 1.00001001;
    u_xlat40 = u_xlat40 * u_xlat40;
    u_xlat40 = u_xlat16_42 * u_xlat40;
    u_xlat16_42 = u_xlat16_15.z * 4.0 + 2.0;
    u_xlat16_41 = u_xlat16_15.z * u_xlat16_15.z;
    u_xlat40 = u_xlat40 * u_xlat16_42;
    u_xlat40 = u_xlat16_41 / u_xlat40;
    u_xlat16_41 = u_xlat40 + -6.10351563e-05;
    u_xlat16_41 = max(u_xlat16_41, 0.0);
    u_xlat16_41 = min(u_xlat16_41, 100.0);
    u_xlat16_4.xyz = vec3(u_xlat16_41) * u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_2.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat1.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat1.x = (u_xlatb1) ? u_xlat0.w : _Opacity;
    SV_TARGET0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_LightmapInd;
uniform lowp sampler2D unity_Lightmap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_31 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat10_5 = texture2D(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_9.xyz = u_xlat10_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_37 = max(u_xlat10_5.w, 9.99999975e-05);
    u_xlat16_30 = dot(u_xlat16_1.xyz, u_xlat16_9.xyz);
    u_xlat16_30 = u_xlat16_30 + 0.5;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_9.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_30) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz / vec3(u_xlat16_37);
    u_xlat30 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb30 = u_xlat30<vs_TEXCOORD8.z;
    u_xlat16_37 = (u_xlatb30) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = u_xlat16_37 + u_xlat16_38;
    u_xlatb30 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb32 = vs_TEXCOORD8.z>=1.0;
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_37 = (u_xlatb30) ? 1.0 : u_xlat16_37;
    u_xlat16_38 = (-u_xlat16_37) + 1.0;
    u_xlat16_6.xyz = (-u_xlat16_6.xyz) * vec3(u_xlat16_38) + u_xlat16_9.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_6.xyz = (-u_xlat16_9.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = _MainLightShadowParams.xxx * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_37 * u_xlat30;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_LightmapInd;
uniform lowp sampler2D unity_Lightmap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_31 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat10_5 = texture2D(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_9.xyz = u_xlat10_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_37 = max(u_xlat10_5.w, 9.99999975e-05);
    u_xlat16_30 = dot(u_xlat16_1.xyz, u_xlat16_9.xyz);
    u_xlat16_30 = u_xlat16_30 + 0.5;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_9.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_30) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz / vec3(u_xlat16_37);
    u_xlat30 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb30 = u_xlat30<vs_TEXCOORD8.z;
    u_xlat16_37 = (u_xlatb30) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = u_xlat16_37 + u_xlat16_38;
    u_xlatb30 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb32 = vs_TEXCOORD8.z>=1.0;
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_37 = (u_xlatb30) ? 1.0 : u_xlat16_37;
    u_xlat16_38 = (-u_xlat16_37) + 1.0;
    u_xlat16_6.xyz = (-u_xlat16_6.xyz) * vec3(u_xlat16_38) + u_xlat16_9.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_6.xyz = (-u_xlat16_9.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = _MainLightShadowParams.xxx * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_37 * u_xlat30;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_LightmapInd;
uniform lowp sampler2D unity_Lightmap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_31 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat10_5 = texture2D(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_9.xyz = u_xlat10_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_37 = max(u_xlat10_5.w, 9.99999975e-05);
    u_xlat16_30 = dot(u_xlat16_1.xyz, u_xlat16_9.xyz);
    u_xlat16_30 = u_xlat16_30 + 0.5;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_9.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_30) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz / vec3(u_xlat16_37);
    u_xlat30 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb30 = u_xlat30<vs_TEXCOORD8.z;
    u_xlat16_37 = (u_xlatb30) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = u_xlat16_37 + u_xlat16_38;
    u_xlatb30 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb32 = vs_TEXCOORD8.z>=1.0;
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_37 = (u_xlatb30) ? 1.0 : u_xlat16_37;
    u_xlat16_38 = (-u_xlat16_37) + 1.0;
    u_xlat16_6.xyz = (-u_xlat16_6.xyz) * vec3(u_xlat16_38) + u_xlat16_9.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_6.xyz = (-u_xlat16_9.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = _MainLightShadowParams.xxx * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_37 * u_xlat30;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(4) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(5) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(6) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(8) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
int u_xlati27;
uint u_xlatu27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
bool u_xlatb29;
mediump float u_xlat16_30;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_5 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat16_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat16_5.w, 9.99999975e-05);
    u_xlat16_27 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_27 = u_xlat16_27 + 0.5;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_28);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat5.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb5 = lessThan(u_xlat5, _CascadeShadowSplitSphereRadii);
    u_xlat16_6.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_5.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_5.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_5.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlat16_5.w = (u_xlatb5.w) ? float(1.0) : float(0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_5.yzw;
    u_xlat16_5.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_28 = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_28 = (-u_xlat16_28) + 4.0;
    u_xlatu27 = uint(u_xlat16_28);
    u_xlati27 = int(int(u_xlatu27) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati27 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati27].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati27 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati27 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb27 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb29 = u_xlat4.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_30 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb27 = u_xlatb27 || u_xlatb29;
    u_xlat16_28 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_28 = u_xlat16_30 * _MainLightShadowParams.x + u_xlat16_28;
    u_xlat16_28 = (u_xlatb27) ? 1.0 : u_xlat16_28;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat27;
    u_xlat16_6.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_28 = u_xlat16_28 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat27 = u_xlat27 * u_xlat16_11 + 1.00001001;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat16_2 * u_xlat27;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_1.x / u_xlat27;
    u_xlat16_1.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(4) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(5) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(6) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(8) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
int u_xlati27;
uint u_xlatu27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
bool u_xlatb29;
mediump float u_xlat16_30;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_5 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat16_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat16_5.w, 9.99999975e-05);
    u_xlat16_27 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_27 = u_xlat16_27 + 0.5;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_28);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat5.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb5 = lessThan(u_xlat5, _CascadeShadowSplitSphereRadii);
    u_xlat16_6.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_5.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_5.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_5.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlat16_5.w = (u_xlatb5.w) ? float(1.0) : float(0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_5.yzw;
    u_xlat16_5.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_28 = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_28 = (-u_xlat16_28) + 4.0;
    u_xlatu27 = uint(u_xlat16_28);
    u_xlati27 = int(int(u_xlatu27) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati27 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati27].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati27 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati27 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb27 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb29 = u_xlat4.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_30 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb27 = u_xlatb27 || u_xlatb29;
    u_xlat16_28 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_28 = u_xlat16_30 * _MainLightShadowParams.x + u_xlat16_28;
    u_xlat16_28 = (u_xlatb27) ? 1.0 : u_xlat16_28;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat27;
    u_xlat16_6.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_28 = u_xlat16_28 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat27 = u_xlat27 * u_xlat16_11 + 1.00001001;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat16_2 * u_xlat27;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_1.x / u_xlat27;
    u_xlat16_1.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(4) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(5) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(6) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(8) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
int u_xlati27;
uint u_xlatu27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
bool u_xlatb29;
mediump float u_xlat16_30;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_5 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat16_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat16_5.w, 9.99999975e-05);
    u_xlat16_27 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_27 = u_xlat16_27 + 0.5;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_28);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat5.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb5 = lessThan(u_xlat5, _CascadeShadowSplitSphereRadii);
    u_xlat16_6.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_5.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_5.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_5.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlat16_5.w = (u_xlatb5.w) ? float(1.0) : float(0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_5.yzw;
    u_xlat16_5.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_28 = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_28 = (-u_xlat16_28) + 4.0;
    u_xlatu27 = uint(u_xlat16_28);
    u_xlati27 = int(int(u_xlatu27) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati27 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati27].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati27 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati27 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb27 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb29 = u_xlat4.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_30 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb27 = u_xlatb27 || u_xlatb29;
    u_xlat16_28 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_28 = u_xlat16_30 * _MainLightShadowParams.x + u_xlat16_28;
    u_xlat16_28 = (u_xlatb27) ? 1.0 : u_xlat16_28;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat27;
    u_xlat16_6.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_28 = u_xlat16_28 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat27 = u_xlat27 * u_xlat16_11 + 1.00001001;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat16_2 * u_xlat27;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_1.x / u_xlat27;
    u_xlat16_1.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_LightmapInd;
uniform lowp sampler2D unity_Lightmap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat10_5 = texture2D(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat10_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat10_5.w, 9.99999975e-05);
    u_xlat16_27 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_27 = u_xlat16_27 + 0.5;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_28);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb27 = u_xlat27<vs_TEXCOORD8.z;
    u_xlat16_6.x = (u_xlatb27) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_15;
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb2 = vs_TEXCOORD8.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb2;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_LightmapInd;
uniform lowp sampler2D unity_Lightmap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat10_5 = texture2D(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat10_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat10_5.w, 9.99999975e-05);
    u_xlat16_27 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_27 = u_xlat16_27 + 0.5;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_28);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb27 = u_xlat27<vs_TEXCOORD8.z;
    u_xlat16_6.x = (u_xlatb27) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_15;
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb2 = vs_TEXCOORD8.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb2;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_LightmapInd;
uniform lowp sampler2D unity_Lightmap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat10_5 = texture2D(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat10_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat10_5.w, 9.99999975e-05);
    u_xlat16_27 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_27 = u_xlat16_27 + 0.5;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_28);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb27 = u_xlat27<vs_TEXCOORD8.z;
    u_xlat16_6.x = (u_xlatb27) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_15;
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb2 = vs_TEXCOORD8.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb2;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(4) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(5) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(6) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(8) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
mediump float u_xlat16_39;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_31 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_37 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = u_xlat16_37 * _MainLightShadowParams.x + u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb30 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb32 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_37 = (u_xlatb30) ? 1.0 : u_xlat16_37;
    u_xlat16_38 = (-u_xlat16_37) + 1.0;
    u_xlat16_5 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_9.xyz = u_xlat16_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_39 = max(u_xlat16_5.w, 9.99999975e-05);
    u_xlat16_30 = dot(u_xlat16_1.xyz, u_xlat16_9.xyz);
    u_xlat16_30 = u_xlat16_30 + 0.5;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_9.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_30) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz / vec3(u_xlat16_39);
    u_xlat16_6.xyz = (-u_xlat16_6.xyz) * vec3(u_xlat16_38) + u_xlat16_9.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_6.xyz = (-u_xlat16_9.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = _MainLightShadowParams.xxx * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_37 * u_xlat30;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(4) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(5) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(6) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(8) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
mediump float u_xlat16_39;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_31 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_37 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = u_xlat16_37 * _MainLightShadowParams.x + u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb30 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb32 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_37 = (u_xlatb30) ? 1.0 : u_xlat16_37;
    u_xlat16_38 = (-u_xlat16_37) + 1.0;
    u_xlat16_5 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_9.xyz = u_xlat16_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_39 = max(u_xlat16_5.w, 9.99999975e-05);
    u_xlat16_30 = dot(u_xlat16_1.xyz, u_xlat16_9.xyz);
    u_xlat16_30 = u_xlat16_30 + 0.5;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_9.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_30) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz / vec3(u_xlat16_39);
    u_xlat16_6.xyz = (-u_xlat16_6.xyz) * vec3(u_xlat16_38) + u_xlat16_9.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_6.xyz = (-u_xlat16_9.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = _MainLightShadowParams.xxx * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_37 * u_xlat30;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(4) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(5) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(6) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(8) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
mediump float u_xlat16_39;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_31 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_37 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = u_xlat16_37 * _MainLightShadowParams.x + u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb30 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb32 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_37 = (u_xlatb30) ? 1.0 : u_xlat16_37;
    u_xlat16_38 = (-u_xlat16_37) + 1.0;
    u_xlat16_5 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_9.xyz = u_xlat16_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_39 = max(u_xlat16_5.w, 9.99999975e-05);
    u_xlat16_30 = dot(u_xlat16_1.xyz, u_xlat16_9.xyz);
    u_xlat16_30 = u_xlat16_30 + 0.5;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_9.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_30) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz / vec3(u_xlat16_39);
    u_xlat16_6.xyz = (-u_xlat16_6.xyz) * vec3(u_xlat16_38) + u_xlat16_9.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_6.xyz = (-u_xlat16_9.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = _MainLightShadowParams.xxx * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_37 * u_xlat30;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_LightmapInd;
uniform lowp sampler2D unity_Lightmap;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
mediump float u_xlat16_30;
mediump float u_xlat16_31;
float u_xlat32;
mediump float u_xlat16_36;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat10_5 = texture2D(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat10_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_31 = max(u_xlat10_5.w, 9.99999975e-05);
    u_xlat16_30 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_30 = u_xlat16_30 + 0.5;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_30) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_31);
    u_xlat16_9.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_9.xyz = (-u_xlat16_6.xyz) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = _MainLightShadowParams.xxx * u_xlat16_9.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_11.x = u_xlat30 * u_xlat30;
    u_xlat16_30 = max(u_xlat16_11.x, 0.100000001);
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_12 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat30 = u_xlat16_30 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_11.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_11.x / u_xlat30;
    u_xlat16_11.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_11.x = max(u_xlat16_11.x, 0.0);
    u_xlat16_11.x = min(u_xlat16_11.x, 100.0);
    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat30;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_11.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_LightmapInd;
uniform lowp sampler2D unity_Lightmap;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
mediump float u_xlat16_30;
mediump float u_xlat16_31;
float u_xlat32;
mediump float u_xlat16_36;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat10_5 = texture2D(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat10_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_31 = max(u_xlat10_5.w, 9.99999975e-05);
    u_xlat16_30 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_30 = u_xlat16_30 + 0.5;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_30) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_31);
    u_xlat16_9.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_9.xyz = (-u_xlat16_6.xyz) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = _MainLightShadowParams.xxx * u_xlat16_9.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_11.x = u_xlat30 * u_xlat30;
    u_xlat16_30 = max(u_xlat16_11.x, 0.100000001);
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_12 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat30 = u_xlat16_30 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_11.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_11.x / u_xlat30;
    u_xlat16_11.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_11.x = max(u_xlat16_11.x, 0.0);
    u_xlat16_11.x = min(u_xlat16_11.x, 100.0);
    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat30;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_11.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_LightmapInd;
uniform lowp sampler2D unity_Lightmap;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
mediump float u_xlat16_30;
mediump float u_xlat16_31;
float u_xlat32;
mediump float u_xlat16_36;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat10_5 = texture2D(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat10_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_31 = max(u_xlat10_5.w, 9.99999975e-05);
    u_xlat16_30 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_30 = u_xlat16_30 + 0.5;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_30) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_31);
    u_xlat16_9.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_9.xyz = (-u_xlat16_6.xyz) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = _MainLightShadowParams.xxx * u_xlat16_9.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_11.x = u_xlat30 * u_xlat30;
    u_xlat16_30 = max(u_xlat16_11.x, 0.100000001);
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_12 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat30 = u_xlat16_30 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_11.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_11.x / u_xlat30;
    u_xlat16_11.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_11.x = max(u_xlat16_11.x, 0.0);
    u_xlat16_11.x = min(u_xlat16_11.x, 100.0);
    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat30;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_11.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(4) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(5) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(6) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(8) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_5 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat16_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat16_5.w, 9.99999975e-05);
    u_xlat16_27 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_27 = u_xlat16_27 + 0.5;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_28);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat2.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
    u_xlat2.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat2.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat2.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat2.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_6.x = dot(u_xlat2, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb2 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb27 = u_xlatb27 || u_xlatb2;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(4) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(5) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(6) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(8) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_5 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat16_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat16_5.w, 9.99999975e-05);
    u_xlat16_27 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_27 = u_xlat16_27 + 0.5;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_28);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat2.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
    u_xlat2.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat2.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat2.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat2.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_6.x = dot(u_xlat2, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb2 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb27 = u_xlatb27 || u_xlatb2;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(4) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(5) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(6) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(8) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_5 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat16_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat16_5.w, 9.99999975e-05);
    u_xlat16_27 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_27 = u_xlat16_27 + 0.5;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_28);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat2.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
    u_xlat2.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat2.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat2.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat2.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_6.x = dot(u_xlat2, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb2 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb27 = u_xlatb27 || u_xlatb2;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_LightmapInd;
uniform lowp sampler2D unity_Lightmap;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat10_5 = texture2D(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat10_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat10_5.w, 9.99999975e-05);
    u_xlat16_27 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_27 = u_xlat16_27 + 0.5;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_28);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat27;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_LightmapInd;
uniform lowp sampler2D unity_Lightmap;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat10_5 = texture2D(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat10_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat10_5.w, 9.99999975e-05);
    u_xlat16_27 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_27 = u_xlat16_27 + 0.5;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_28);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat27;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_LightmapInd;
uniform lowp sampler2D unity_Lightmap;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat10_5 = texture2D(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat10_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat10_5.w, 9.99999975e-05);
    u_xlat16_27 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_27 = u_xlat16_27 + 0.5;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_28);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat27;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(4) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(5) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(6) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(8) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_31 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat16_5 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_9.xyz = u_xlat16_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_37 = max(u_xlat16_5.w, 9.99999975e-05);
    u_xlat16_30 = dot(u_xlat16_1.xyz, u_xlat16_9.xyz);
    u_xlat16_30 = u_xlat16_30 + 0.5;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_9.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_30) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz / vec3(u_xlat16_37);
    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
    u_xlat16_30 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_37 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = u_xlat16_30 * _MainLightShadowParams.x + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb30 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb32 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_37 = (u_xlatb30) ? 1.0 : u_xlat16_37;
    u_xlat16_38 = (-u_xlat16_37) + 1.0;
    u_xlat16_6.xyz = (-u_xlat16_6.xyz) * vec3(u_xlat16_38) + u_xlat16_9.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_6.xyz = (-u_xlat16_9.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = _MainLightShadowParams.xxx * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_37 * u_xlat30;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(4) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(5) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(6) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(8) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_31 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat16_5 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_9.xyz = u_xlat16_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_37 = max(u_xlat16_5.w, 9.99999975e-05);
    u_xlat16_30 = dot(u_xlat16_1.xyz, u_xlat16_9.xyz);
    u_xlat16_30 = u_xlat16_30 + 0.5;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_9.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_30) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz / vec3(u_xlat16_37);
    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
    u_xlat16_30 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_37 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = u_xlat16_30 * _MainLightShadowParams.x + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb30 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb32 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_37 = (u_xlatb30) ? 1.0 : u_xlat16_37;
    u_xlat16_38 = (-u_xlat16_37) + 1.0;
    u_xlat16_6.xyz = (-u_xlat16_6.xyz) * vec3(u_xlat16_38) + u_xlat16_9.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_6.xyz = (-u_xlat16_9.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = _MainLightShadowParams.xxx * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_37 * u_xlat30;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(4) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(5) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(6) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(8) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_31 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat16_5 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_9.xyz = u_xlat16_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_37 = max(u_xlat16_5.w, 9.99999975e-05);
    u_xlat16_30 = dot(u_xlat16_1.xyz, u_xlat16_9.xyz);
    u_xlat16_30 = u_xlat16_30 + 0.5;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_9.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_30) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz / vec3(u_xlat16_37);
    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
    u_xlat16_30 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_37 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = u_xlat16_30 * _MainLightShadowParams.x + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb30 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb32 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_37 = (u_xlatb30) ? 1.0 : u_xlat16_37;
    u_xlat16_38 = (-u_xlat16_37) + 1.0;
    u_xlat16_6.xyz = (-u_xlat16_6.xyz) * vec3(u_xlat16_38) + u_xlat16_9.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_6.xyz = (-u_xlat16_9.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = _MainLightShadowParams.xxx * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_37 * u_xlat30;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_Lightmap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_31 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    u_xlat30 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb30 = u_xlat30<u_xlat4.z;
    u_xlat5.x = (u_xlatb30) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    u_xlat30 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb30 = u_xlat30<u_xlat4.z;
    u_xlat5.y = (u_xlatb30) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    u_xlat30 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb30 = u_xlat30<u_xlat4.z;
    u_xlat5.z = (u_xlatb30) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    u_xlat30 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb30 = u_xlat30<u_xlat4.z;
    u_xlat5.w = (u_xlatb30) ? 0.0 : 1.0;
    u_xlat16_37 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = u_xlat16_37 * _MainLightShadowParams.x + u_xlat16_38;
    u_xlatb30 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb32 = vs_TEXCOORD8.z>=1.0;
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_37 = (u_xlatb30) ? 1.0 : u_xlat16_37;
    u_xlat16_38 = (-u_xlat16_37) + 1.0;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_9.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_6.xyz = (-u_xlat16_6.xyz) * vec3(u_xlat16_38) + u_xlat16_9.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_6.xyz = (-u_xlat10_4.xyz) * vec3(2.0, 2.0, 2.0) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = _MainLightShadowParams.xxx * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_37 * u_xlat30;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_Lightmap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_31 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    u_xlat30 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb30 = u_xlat30<u_xlat4.z;
    u_xlat5.x = (u_xlatb30) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    u_xlat30 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb30 = u_xlat30<u_xlat4.z;
    u_xlat5.y = (u_xlatb30) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    u_xlat30 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb30 = u_xlat30<u_xlat4.z;
    u_xlat5.z = (u_xlatb30) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    u_xlat30 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb30 = u_xlat30<u_xlat4.z;
    u_xlat5.w = (u_xlatb30) ? 0.0 : 1.0;
    u_xlat16_37 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = u_xlat16_37 * _MainLightShadowParams.x + u_xlat16_38;
    u_xlatb30 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb32 = vs_TEXCOORD8.z>=1.0;
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_37 = (u_xlatb30) ? 1.0 : u_xlat16_37;
    u_xlat16_38 = (-u_xlat16_37) + 1.0;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_9.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_6.xyz = (-u_xlat16_6.xyz) * vec3(u_xlat16_38) + u_xlat16_9.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_6.xyz = (-u_xlat10_4.xyz) * vec3(2.0, 2.0, 2.0) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = _MainLightShadowParams.xxx * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_37 * u_xlat30;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_Lightmap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_31 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    u_xlat30 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb30 = u_xlat30<u_xlat4.z;
    u_xlat5.x = (u_xlatb30) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    u_xlat30 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb30 = u_xlat30<u_xlat4.z;
    u_xlat5.y = (u_xlatb30) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    u_xlat30 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb30 = u_xlat30<u_xlat4.z;
    u_xlat5.z = (u_xlatb30) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    u_xlat30 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb30 = u_xlat30<u_xlat4.z;
    u_xlat5.w = (u_xlatb30) ? 0.0 : 1.0;
    u_xlat16_37 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = u_xlat16_37 * _MainLightShadowParams.x + u_xlat16_38;
    u_xlatb30 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb32 = vs_TEXCOORD8.z>=1.0;
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_37 = (u_xlatb30) ? 1.0 : u_xlat16_37;
    u_xlat16_38 = (-u_xlat16_37) + 1.0;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_9.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_6.xyz = (-u_xlat16_6.xyz) * vec3(u_xlat16_38) + u_xlat16_9.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_6.xyz = (-u_xlat10_4.xyz) * vec3(2.0, 2.0, 2.0) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = _MainLightShadowParams.xxx * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_37 * u_xlat30;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(4) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(5) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(6) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(8) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_5 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat16_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat16_5.w, 9.99999975e-05);
    u_xlat16_27 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_27 = u_xlat16_27 + 0.5;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_28);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_27 * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb2 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb27 = u_xlatb27 || u_xlatb2;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(4) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(5) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(6) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(8) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_5 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat16_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat16_5.w, 9.99999975e-05);
    u_xlat16_27 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_27 = u_xlat16_27 + 0.5;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_28);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_27 * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb2 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb27 = u_xlatb27 || u_xlatb2;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(4) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(5) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(6) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(8) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_5 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat16_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat16_5.w, 9.99999975e-05);
    u_xlat16_27 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_27 = u_xlat16_27 + 0.5;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_28);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_27 * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb2 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb27 = u_xlatb27 || u_xlatb2;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_Lightmap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
bool u_xlatb29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat16_28 = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.x = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.y = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.z = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.w = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat16_6.x = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15;
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb29 = vs_TEXCOORD8.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb29;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat27 = u_xlat27 * u_xlat16_11 + 1.00001001;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat16_2 * u_xlat27;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_1.x / u_xlat27;
    u_xlat16_1.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_Lightmap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
bool u_xlatb29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat16_28 = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.x = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.y = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.z = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.w = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat16_6.x = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15;
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb29 = vs_TEXCOORD8.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb29;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat27 = u_xlat27 * u_xlat16_11 + 1.00001001;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat16_2 * u_xlat27;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_1.x / u_xlat27;
    u_xlat16_1.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_Lightmap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
bool u_xlatb29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat16_28 = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.x = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.y = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.z = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.w = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat16_6.x = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15;
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb29 = vs_TEXCOORD8.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb29;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat27 = u_xlat27 * u_xlat16_11 + 1.00001001;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat16_2 * u_xlat27;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_1.x / u_xlat27;
    u_xlat16_1.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
mediump float u_xlat16_30;
mediump float u_xlat16_31;
float u_xlat32;
mediump float u_xlat16_36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_5 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat16_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_31 = max(u_xlat16_5.w, 9.99999975e-05);
    u_xlat16_30 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_30 = u_xlat16_30 + 0.5;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_30) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_31);
    u_xlat16_9.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_9.xyz = (-u_xlat16_6.xyz) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = _MainLightShadowParams.xxx * u_xlat16_9.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_11.x = u_xlat30 * u_xlat30;
    u_xlat16_30 = max(u_xlat16_11.x, 0.100000001);
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_12 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat30 = u_xlat16_30 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_11.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_11.x / u_xlat30;
    u_xlat16_11.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_11.x = max(u_xlat16_11.x, 0.0);
    u_xlat16_11.x = min(u_xlat16_11.x, 100.0);
    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat30;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_11.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
mediump float u_xlat16_30;
mediump float u_xlat16_31;
float u_xlat32;
mediump float u_xlat16_36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_5 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat16_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_31 = max(u_xlat16_5.w, 9.99999975e-05);
    u_xlat16_30 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_30 = u_xlat16_30 + 0.5;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_30) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_31);
    u_xlat16_9.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_9.xyz = (-u_xlat16_6.xyz) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = _MainLightShadowParams.xxx * u_xlat16_9.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_11.x = u_xlat30 * u_xlat30;
    u_xlat16_30 = max(u_xlat16_11.x, 0.100000001);
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_12 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat30 = u_xlat16_30 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_11.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_11.x / u_xlat30;
    u_xlat16_11.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_11.x = max(u_xlat16_11.x, 0.0);
    u_xlat16_11.x = min(u_xlat16_11.x, 100.0);
    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat30;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_11.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
mediump float u_xlat16_30;
mediump float u_xlat16_31;
float u_xlat32;
mediump float u_xlat16_36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_5 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat16_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_31 = max(u_xlat16_5.w, 9.99999975e-05);
    u_xlat16_30 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_30 = u_xlat16_30 + 0.5;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_30) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_31);
    u_xlat16_9.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_9.xyz = (-u_xlat16_6.xyz) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = _MainLightShadowParams.xxx * u_xlat16_9.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_11.x = u_xlat30 * u_xlat30;
    u_xlat16_30 = max(u_xlat16_11.x, 0.100000001);
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_12 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat30 = u_xlat16_30 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_11.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_11.x / u_xlat30;
    u_xlat16_11.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_11.x = max(u_xlat16_11.x, 0.0);
    u_xlat16_11.x = min(u_xlat16_11.x, 100.0);
    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat30;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_11.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_Lightmap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_31 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat30 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb30 = u_xlat30<vs_TEXCOORD8.z;
    u_xlat16_37 = (u_xlatb30) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = u_xlat16_37 + u_xlat16_38;
    u_xlatb30 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb32 = vs_TEXCOORD8.z>=1.0;
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_37 = (u_xlatb30) ? 1.0 : u_xlat16_37;
    u_xlat16_38 = (-u_xlat16_37) + 1.0;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_9.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_6.xyz = (-u_xlat16_6.xyz) * vec3(u_xlat16_38) + u_xlat16_9.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_6.xyz = (-u_xlat10_4.xyz) * vec3(2.0, 2.0, 2.0) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = _MainLightShadowParams.xxx * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_37 * u_xlat30;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_Lightmap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_31 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat30 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb30 = u_xlat30<vs_TEXCOORD8.z;
    u_xlat16_37 = (u_xlatb30) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = u_xlat16_37 + u_xlat16_38;
    u_xlatb30 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb32 = vs_TEXCOORD8.z>=1.0;
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_37 = (u_xlatb30) ? 1.0 : u_xlat16_37;
    u_xlat16_38 = (-u_xlat16_37) + 1.0;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_9.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_6.xyz = (-u_xlat16_6.xyz) * vec3(u_xlat16_38) + u_xlat16_9.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_6.xyz = (-u_xlat10_4.xyz) * vec3(2.0, 2.0, 2.0) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = _MainLightShadowParams.xxx * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_37 * u_xlat30;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_Lightmap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_31 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat30 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb30 = u_xlat30<vs_TEXCOORD8.z;
    u_xlat16_37 = (u_xlatb30) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = u_xlat16_37 + u_xlat16_38;
    u_xlatb30 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb32 = vs_TEXCOORD8.z>=1.0;
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_37 = (u_xlatb30) ? 1.0 : u_xlat16_37;
    u_xlat16_38 = (-u_xlat16_37) + 1.0;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_9.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_6.xyz = (-u_xlat16_6.xyz) * vec3(u_xlat16_38) + u_xlat16_9.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_6.xyz = (-u_xlat10_4.xyz) * vec3(2.0, 2.0, 2.0) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = _MainLightShadowParams.xxx * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_37 * u_xlat30;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_5 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat16_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat16_5.w, 9.99999975e-05);
    u_xlat16_27 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_27 = u_xlat16_27 + 0.5;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_28);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat27;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_5 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat16_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat16_5.w, 9.99999975e-05);
    u_xlat16_27 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_27 = u_xlat16_27 + 0.5;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_28);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat27;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D unity_LightmapInd;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_5 = texture(unity_LightmapInd, vs_TEXCOORD5.xy);
    u_xlat16_6.xyz = u_xlat16_5.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat16_28 = max(u_xlat16_5.w, 9.99999975e-05);
    u_xlat16_27 = dot(u_xlat16_1.xyz, u_xlat16_6.xyz);
    u_xlat16_27 = u_xlat16_27 + 0.5;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz / vec3(u_xlat16_28);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat27;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_Lightmap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb27 = u_xlat27<vs_TEXCOORD8.z;
    u_xlat16_6.x = (u_xlatb27) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_15;
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb2 = vs_TEXCOORD8.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb2;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_Lightmap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb27 = u_xlat27<vs_TEXCOORD8.z;
    u_xlat16_6.x = (u_xlatb27) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_15;
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb2 = vs_TEXCOORD8.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb2;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_Lightmap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb27 = u_xlat27<vs_TEXCOORD8.z;
    u_xlat16_6.x = (u_xlatb27) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_15;
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb2 = vs_TEXCOORD8.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb2;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
mediump float u_xlat16_18;
float u_xlat36;
int u_xlati36;
uint u_xlatu36;
bool u_xlatb36;
mediump float u_xlat16_37;
float u_xlat38;
bool u_xlatb38;
mediump float u_xlat16_42;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_37 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_1.xyz = vec3(u_xlat16_37) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat12.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_37 = dot((-u_xlat12.xyz), u_xlat16_1.xyz);
    u_xlat16_37 = u_xlat16_37 + u_xlat16_37;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_37)) + (-u_xlat12.xyz);
    u_xlat16_37 = dot(u_xlat16_1.xyz, u_xlat12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_37 = (-u_xlat16_37) + 1.0;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_42 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_42) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_42 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_42 * u_xlat16_42;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_12.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat38 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat38 = (u_xlatb4.y) ? u_xlat38 : _Metallic;
    u_xlat16_6.x = (-u_xlat38) * 0.959999979 + 0.959999979;
    u_xlat16_18 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_18 = u_xlat0.x + u_xlat16_18;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat38) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_18) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_37) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_12.xyz * u_xlat16_6.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat5.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb5 = lessThan(u_xlat5, _CascadeShadowSplitSphereRadii);
    u_xlat16_6.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_5.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_5.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_5.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlat16_5.w = (u_xlatb5.w) ? float(1.0) : float(0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_5.yzw;
    u_xlat16_5.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_37 = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_37 = (-u_xlat16_37) + 4.0;
    u_xlatu36 = uint(u_xlat16_37);
    u_xlati36 = int(int(u_xlatu36) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati36 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati36].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati36 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati36 + 3)].xyz;
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_37 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = u_xlat16_37 * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb36 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb38 = u_xlat4.z>=1.0;
#endif
    u_xlatb36 = u_xlatb36 || u_xlatb38;
    u_xlat16_37 = (u_xlatb36) ? 1.0 : u_xlat16_37;
    u_xlat16_6.x = (-u_xlat16_37) + 1.0;
    u_xlat16_18 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = vec3(u_xlat16_18) * _MainLightColor.xyz;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_11.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = (-u_xlat16_10.xyz) * u_xlat16_6.xxx + u_xlat16_11.xyz;
    u_xlat16_10.xyz = max(u_xlat16_10.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_10.xyz = (-u_xlat16_4.xyz) * vec3(2.0, 2.0, 2.0) + u_xlat16_10.xyz;
    u_xlat16_10.xyz = _MainLightShadowParams.xxx * u_xlat16_10.xyz + u_xlat16_11.xyz;
    u_xlat16_10.xyz = min(u_xlat16_10.xyz, u_xlat16_11.xyz);
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat36 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_37 = u_xlat16_37 * u_xlat36;
    u_xlat16_37 = u_xlat16_18 * u_xlat16_37;
    u_xlat16_6.xyz = vec3(u_xlat16_37) * _MainLightColor.xyz;
    u_xlat36 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat36 = max(u_xlat36, 1.17549435e-38);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.xyz;
    u_xlat36 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat36 = u_xlat36 * u_xlat36;
    u_xlat16_14 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat36 = u_xlat36 * u_xlat16_14 + 1.00001001;
    u_xlat36 = u_xlat36 * u_xlat36;
    u_xlat36 = u_xlat16_2 * u_xlat36;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat36 = u_xlat36 * u_xlat16_2;
    u_xlat36 = u_xlat16_1.x / u_xlat36;
    u_xlat16_1.x = u_xlat36 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
mediump float u_xlat16_18;
float u_xlat36;
int u_xlati36;
uint u_xlatu36;
bool u_xlatb36;
mediump float u_xlat16_37;
float u_xlat38;
bool u_xlatb38;
mediump float u_xlat16_42;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_37 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_1.xyz = vec3(u_xlat16_37) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat12.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_37 = dot((-u_xlat12.xyz), u_xlat16_1.xyz);
    u_xlat16_37 = u_xlat16_37 + u_xlat16_37;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_37)) + (-u_xlat12.xyz);
    u_xlat16_37 = dot(u_xlat16_1.xyz, u_xlat12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_37 = (-u_xlat16_37) + 1.0;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_42 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_42) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_42 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_42 * u_xlat16_42;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_12.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat38 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat38 = (u_xlatb4.y) ? u_xlat38 : _Metallic;
    u_xlat16_6.x = (-u_xlat38) * 0.959999979 + 0.959999979;
    u_xlat16_18 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_18 = u_xlat0.x + u_xlat16_18;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat38) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_18) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_37) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_12.xyz * u_xlat16_6.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat5.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb5 = lessThan(u_xlat5, _CascadeShadowSplitSphereRadii);
    u_xlat16_6.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_5.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_5.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_5.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlat16_5.w = (u_xlatb5.w) ? float(1.0) : float(0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_5.yzw;
    u_xlat16_5.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_37 = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_37 = (-u_xlat16_37) + 4.0;
    u_xlatu36 = uint(u_xlat16_37);
    u_xlati36 = int(int(u_xlatu36) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati36 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati36].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati36 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati36 + 3)].xyz;
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_37 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = u_xlat16_37 * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb36 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb38 = u_xlat4.z>=1.0;
#endif
    u_xlatb36 = u_xlatb36 || u_xlatb38;
    u_xlat16_37 = (u_xlatb36) ? 1.0 : u_xlat16_37;
    u_xlat16_6.x = (-u_xlat16_37) + 1.0;
    u_xlat16_18 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = vec3(u_xlat16_18) * _MainLightColor.xyz;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_11.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = (-u_xlat16_10.xyz) * u_xlat16_6.xxx + u_xlat16_11.xyz;
    u_xlat16_10.xyz = max(u_xlat16_10.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_10.xyz = (-u_xlat16_4.xyz) * vec3(2.0, 2.0, 2.0) + u_xlat16_10.xyz;
    u_xlat16_10.xyz = _MainLightShadowParams.xxx * u_xlat16_10.xyz + u_xlat16_11.xyz;
    u_xlat16_10.xyz = min(u_xlat16_10.xyz, u_xlat16_11.xyz);
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat36 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_37 = u_xlat16_37 * u_xlat36;
    u_xlat16_37 = u_xlat16_18 * u_xlat16_37;
    u_xlat16_6.xyz = vec3(u_xlat16_37) * _MainLightColor.xyz;
    u_xlat36 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat36 = max(u_xlat36, 1.17549435e-38);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.xyz;
    u_xlat36 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat36 = u_xlat36 * u_xlat36;
    u_xlat16_14 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat36 = u_xlat36 * u_xlat16_14 + 1.00001001;
    u_xlat36 = u_xlat36 * u_xlat36;
    u_xlat36 = u_xlat16_2 * u_xlat36;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat36 = u_xlat36 * u_xlat16_2;
    u_xlat36 = u_xlat16_1.x / u_xlat36;
    u_xlat16_1.x = u_xlat36 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
mediump float u_xlat16_18;
float u_xlat36;
int u_xlati36;
uint u_xlatu36;
bool u_xlatb36;
mediump float u_xlat16_37;
float u_xlat38;
bool u_xlatb38;
mediump float u_xlat16_42;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_37 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_1.xyz = vec3(u_xlat16_37) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat12.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_37 = dot((-u_xlat12.xyz), u_xlat16_1.xyz);
    u_xlat16_37 = u_xlat16_37 + u_xlat16_37;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_37)) + (-u_xlat12.xyz);
    u_xlat16_37 = dot(u_xlat16_1.xyz, u_xlat12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_37 = (-u_xlat16_37) + 1.0;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_42 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_42) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_42 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_42 * u_xlat16_42;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_12.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat38 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat38 = (u_xlatb4.y) ? u_xlat38 : _Metallic;
    u_xlat16_6.x = (-u_xlat38) * 0.959999979 + 0.959999979;
    u_xlat16_18 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_18 = u_xlat0.x + u_xlat16_18;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat38) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_18) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_37) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_12.xyz * u_xlat16_6.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat5.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb5 = lessThan(u_xlat5, _CascadeShadowSplitSphereRadii);
    u_xlat16_6.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_5.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_5.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_5.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlat16_5.w = (u_xlatb5.w) ? float(1.0) : float(0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_5.yzw;
    u_xlat16_5.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_37 = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_37 = (-u_xlat16_37) + 4.0;
    u_xlatu36 = uint(u_xlat16_37);
    u_xlati36 = int(int(u_xlatu36) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati36 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati36].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati36 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati36 + 3)].xyz;
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_37 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = u_xlat16_37 * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb36 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb38 = u_xlat4.z>=1.0;
#endif
    u_xlatb36 = u_xlatb36 || u_xlatb38;
    u_xlat16_37 = (u_xlatb36) ? 1.0 : u_xlat16_37;
    u_xlat16_6.x = (-u_xlat16_37) + 1.0;
    u_xlat16_18 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = vec3(u_xlat16_18) * _MainLightColor.xyz;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_11.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = (-u_xlat16_10.xyz) * u_xlat16_6.xxx + u_xlat16_11.xyz;
    u_xlat16_10.xyz = max(u_xlat16_10.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_10.xyz = (-u_xlat16_4.xyz) * vec3(2.0, 2.0, 2.0) + u_xlat16_10.xyz;
    u_xlat16_10.xyz = _MainLightShadowParams.xxx * u_xlat16_10.xyz + u_xlat16_11.xyz;
    u_xlat16_10.xyz = min(u_xlat16_10.xyz, u_xlat16_11.xyz);
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat36 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_37 = u_xlat16_37 * u_xlat36;
    u_xlat16_37 = u_xlat16_18 * u_xlat16_37;
    u_xlat16_6.xyz = vec3(u_xlat16_37) * _MainLightColor.xyz;
    u_xlat36 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat36 = max(u_xlat36, 1.17549435e-38);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.xyz;
    u_xlat36 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat36 = u_xlat36 * u_xlat36;
    u_xlat16_14 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat36 = u_xlat36 * u_xlat16_14 + 1.00001001;
    u_xlat36 = u_xlat36 * u_xlat36;
    u_xlat36 = u_xlat16_2 * u_xlat36;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat36 = u_xlat36 * u_xlat16_2;
    u_xlat36 = u_xlat16_1.x / u_xlat36;
    u_xlat16_1.x = u_xlat36 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_Lightmap;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
vec3 u_xlat4;
vec4 u_xlat5;
lowp vec3 u_xlat10_5;
bvec3 u_xlatb5;
vec3 u_xlat6;
lowp vec4 u_xlat10_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_13;
mediump float u_xlat16_17;
float u_xlat30;
mediump float u_xlat16_30;
mediump float u_xlat16_31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_37;
void main()
{
    u_xlat10_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz + u_xlat10_0.xyz;
    u_xlat16_2.xyz = max(u_xlat16_1.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_2.xyz = (-u_xlat10_0.xyz) * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = _MainLightShadowParams.xxx * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = min(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_31 = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * vec3(u_xlat16_31);
    u_xlat3.y = u_xlat0.x;
    u_xlat3.x = vs_TEXCOORD2.x;
    u_xlat3.z = vs_TEXCOORD1.x;
    u_xlat4.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_5.xyz = texture2D(_BumpMap, u_xlat4.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb5.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat6.xyz = (u_xlatb5.x) ? u_xlat16_2.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_2.x = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat3.y = u_xlat0.z;
    u_xlat3.x = vs_TEXCOORD2.y;
    u_xlat3.z = vs_TEXCOORD1.y;
    u_xlat16_2.y = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_2.z = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_2.xyz = vec3(u_xlat16_31) * u_xlat16_2.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_2.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_7.xyz = u_xlat16_2.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_2.xyz, u_xlat10.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat4.xy).x;
    u_xlat0.x = (u_xlatb5.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_32 = (-u_xlat0.x) + 1.0;
    u_xlat16_37 = (-u_xlat16_32) * 0.699999988 + 1.70000005;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_32 = max(u_xlat16_32, 6.10351563e-05);
    u_xlat16_37 = u_xlat16_37 * 6.0;
    u_xlat10_6 = textureCube(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_37);
    u_xlat16_7.x = u_xlat10_6.w + -1.0;
    u_xlat16_7.x = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlat16_7.x = log2(u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.y;
    u_xlat16_7.x = exp2(u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * u_xlat16_7.xxx;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32 + 1.0;
    u_xlat16_37 = float(1.0) / u_xlat16_37;
    u_xlat16_10.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37);
    u_xlat33 = texture2D(_MetallicGlossMap, u_xlat4.xy).x;
    u_xlat33 = (u_xlatb5.y) ? u_xlat33 : _Metallic;
    u_xlat16_7.x = (-u_xlat33) * 0.959999979 + 0.959999979;
    u_xlat16_17 = (-u_xlat16_7.x) + 1.0;
    u_xlat16_17 = u_xlat0.x + u_xlat16_17;
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat5 = texture2D(_MainTex, u_xlat4.xy);
    u_xlat4.xyz = texture2D(_EmissionMap, u_xlat4.xy).xyz;
    u_xlat5.xyz = (bool(u_xlatb0)) ? u_xlat5.xyz : _Color.xyz;
    u_xlat16_8.xyz = u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_7.xzw = u_xlat16_7.xxx * u_xlat5.xyz;
    u_xlat16_8.xyz = vec3(u_xlat33) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_9.xyz = vec3(u_xlat16_17) + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_31) * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_9.xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_7.xzw + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat30 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_2.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_11.x = u_xlat30 * u_xlat30;
    u_xlat16_30 = max(u_xlat16_11.x, 0.100000001);
    u_xlat16_13 = u_xlat16_32 * u_xlat16_32 + -1.0;
    u_xlat3.x = u_xlat3.x * u_xlat16_13 + 1.00001001;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat30 = u_xlat16_30 * u_xlat3.x;
    u_xlat16_3 = u_xlat16_32 * 4.0 + 2.0;
    u_xlat16_11.x = u_xlat16_32 * u_xlat16_32;
    u_xlat30 = u_xlat30 * u_xlat16_3;
    u_xlat30 = u_xlat16_11.x / u_xlat30;
    u_xlat16_11.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_11.x = max(u_xlat16_11.x, 0.0);
    u_xlat16_11.x = min(u_xlat16_11.x, 100.0);
    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_8.xyz + u_xlat16_7.xzw;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat30;
    u_xlat16_2.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_11.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat5.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_Lightmap;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
vec3 u_xlat4;
vec4 u_xlat5;
lowp vec3 u_xlat10_5;
bvec3 u_xlatb5;
vec3 u_xlat6;
lowp vec4 u_xlat10_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_13;
mediump float u_xlat16_17;
float u_xlat30;
mediump float u_xlat16_30;
mediump float u_xlat16_31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_37;
void main()
{
    u_xlat10_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz + u_xlat10_0.xyz;
    u_xlat16_2.xyz = max(u_xlat16_1.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_2.xyz = (-u_xlat10_0.xyz) * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = _MainLightShadowParams.xxx * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = min(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_31 = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * vec3(u_xlat16_31);
    u_xlat3.y = u_xlat0.x;
    u_xlat3.x = vs_TEXCOORD2.x;
    u_xlat3.z = vs_TEXCOORD1.x;
    u_xlat4.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_5.xyz = texture2D(_BumpMap, u_xlat4.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb5.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat6.xyz = (u_xlatb5.x) ? u_xlat16_2.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_2.x = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat3.y = u_xlat0.z;
    u_xlat3.x = vs_TEXCOORD2.y;
    u_xlat3.z = vs_TEXCOORD1.y;
    u_xlat16_2.y = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_2.z = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_2.xyz = vec3(u_xlat16_31) * u_xlat16_2.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_2.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_7.xyz = u_xlat16_2.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_2.xyz, u_xlat10.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat4.xy).x;
    u_xlat0.x = (u_xlatb5.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_32 = (-u_xlat0.x) + 1.0;
    u_xlat16_37 = (-u_xlat16_32) * 0.699999988 + 1.70000005;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_32 = max(u_xlat16_32, 6.10351563e-05);
    u_xlat16_37 = u_xlat16_37 * 6.0;
    u_xlat10_6 = textureCube(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_37);
    u_xlat16_7.x = u_xlat10_6.w + -1.0;
    u_xlat16_7.x = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlat16_7.x = log2(u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.y;
    u_xlat16_7.x = exp2(u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * u_xlat16_7.xxx;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32 + 1.0;
    u_xlat16_37 = float(1.0) / u_xlat16_37;
    u_xlat16_10.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37);
    u_xlat33 = texture2D(_MetallicGlossMap, u_xlat4.xy).x;
    u_xlat33 = (u_xlatb5.y) ? u_xlat33 : _Metallic;
    u_xlat16_7.x = (-u_xlat33) * 0.959999979 + 0.959999979;
    u_xlat16_17 = (-u_xlat16_7.x) + 1.0;
    u_xlat16_17 = u_xlat0.x + u_xlat16_17;
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat5 = texture2D(_MainTex, u_xlat4.xy);
    u_xlat4.xyz = texture2D(_EmissionMap, u_xlat4.xy).xyz;
    u_xlat5.xyz = (bool(u_xlatb0)) ? u_xlat5.xyz : _Color.xyz;
    u_xlat16_8.xyz = u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_7.xzw = u_xlat16_7.xxx * u_xlat5.xyz;
    u_xlat16_8.xyz = vec3(u_xlat33) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_9.xyz = vec3(u_xlat16_17) + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_31) * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_9.xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_7.xzw + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat30 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_2.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_11.x = u_xlat30 * u_xlat30;
    u_xlat16_30 = max(u_xlat16_11.x, 0.100000001);
    u_xlat16_13 = u_xlat16_32 * u_xlat16_32 + -1.0;
    u_xlat3.x = u_xlat3.x * u_xlat16_13 + 1.00001001;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat30 = u_xlat16_30 * u_xlat3.x;
    u_xlat16_3 = u_xlat16_32 * 4.0 + 2.0;
    u_xlat16_11.x = u_xlat16_32 * u_xlat16_32;
    u_xlat30 = u_xlat30 * u_xlat16_3;
    u_xlat30 = u_xlat16_11.x / u_xlat30;
    u_xlat16_11.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_11.x = max(u_xlat16_11.x, 0.0);
    u_xlat16_11.x = min(u_xlat16_11.x, 100.0);
    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_8.xyz + u_xlat16_7.xzw;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat30;
    u_xlat16_2.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_11.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat5.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_Lightmap;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
vec3 u_xlat4;
vec4 u_xlat5;
lowp vec3 u_xlat10_5;
bvec3 u_xlatb5;
vec3 u_xlat6;
lowp vec4 u_xlat10_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_13;
mediump float u_xlat16_17;
float u_xlat30;
mediump float u_xlat16_30;
mediump float u_xlat16_31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_37;
void main()
{
    u_xlat10_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz + u_xlat10_0.xyz;
    u_xlat16_2.xyz = max(u_xlat16_1.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_2.xyz = (-u_xlat10_0.xyz) * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = _MainLightShadowParams.xxx * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = min(u_xlat16_1.xyz, u_xlat16_2.xyz);
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_31 = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * vec3(u_xlat16_31);
    u_xlat3.y = u_xlat0.x;
    u_xlat3.x = vs_TEXCOORD2.x;
    u_xlat3.z = vs_TEXCOORD1.x;
    u_xlat4.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_5.xyz = texture2D(_BumpMap, u_xlat4.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb5.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat6.xyz = (u_xlatb5.x) ? u_xlat16_2.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_2.x = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat3.y = u_xlat0.z;
    u_xlat3.x = vs_TEXCOORD2.y;
    u_xlat3.z = vs_TEXCOORD1.y;
    u_xlat16_2.y = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_2.z = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_2.xyz = vec3(u_xlat16_31) * u_xlat16_2.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_2.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_7.xyz = u_xlat16_2.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_2.xyz, u_xlat10.xyz);
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat4.xy).x;
    u_xlat0.x = (u_xlatb5.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_32 = (-u_xlat0.x) + 1.0;
    u_xlat16_37 = (-u_xlat16_32) * 0.699999988 + 1.70000005;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_32 = max(u_xlat16_32, 6.10351563e-05);
    u_xlat16_37 = u_xlat16_37 * 6.0;
    u_xlat10_6 = textureCube(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_37);
    u_xlat16_7.x = u_xlat10_6.w + -1.0;
    u_xlat16_7.x = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlat16_7.x = log2(u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.y;
    u_xlat16_7.x = exp2(u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * u_xlat16_7.xxx;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32 + 1.0;
    u_xlat16_37 = float(1.0) / u_xlat16_37;
    u_xlat16_10.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37);
    u_xlat33 = texture2D(_MetallicGlossMap, u_xlat4.xy).x;
    u_xlat33 = (u_xlatb5.y) ? u_xlat33 : _Metallic;
    u_xlat16_7.x = (-u_xlat33) * 0.959999979 + 0.959999979;
    u_xlat16_17 = (-u_xlat16_7.x) + 1.0;
    u_xlat16_17 = u_xlat0.x + u_xlat16_17;
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat5 = texture2D(_MainTex, u_xlat4.xy);
    u_xlat4.xyz = texture2D(_EmissionMap, u_xlat4.xy).xyz;
    u_xlat5.xyz = (bool(u_xlatb0)) ? u_xlat5.xyz : _Color.xyz;
    u_xlat16_8.xyz = u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_7.xzw = u_xlat16_7.xxx * u_xlat5.xyz;
    u_xlat16_8.xyz = vec3(u_xlat33) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_9.xyz = vec3(u_xlat16_17) + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_31) * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_9.xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_7.xzw + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat30 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_2.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_11.x = u_xlat30 * u_xlat30;
    u_xlat16_30 = max(u_xlat16_11.x, 0.100000001);
    u_xlat16_13 = u_xlat16_32 * u_xlat16_32 + -1.0;
    u_xlat3.x = u_xlat3.x * u_xlat16_13 + 1.00001001;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat30 = u_xlat16_30 * u_xlat3.x;
    u_xlat16_3 = u_xlat16_32 * 4.0 + 2.0;
    u_xlat16_11.x = u_xlat16_32 * u_xlat16_32;
    u_xlat30 = u_xlat30 * u_xlat16_3;
    u_xlat30 = u_xlat16_11.x / u_xlat30;
    u_xlat16_11.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_11.x = max(u_xlat16_11.x, 0.0);
    u_xlat16_11.x = min(u_xlat16_11.x, 100.0);
    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_8.xyz + u_xlat16_7.xzw;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat30;
    u_xlat16_2.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_11.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat5.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
int u_xlati30;
uint u_xlatu30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat5.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb5 = lessThan(u_xlat5, _CascadeShadowSplitSphereRadii);
    u_xlat16_6.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_5.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_5.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_5.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlat16_5.w = (u_xlatb5.w) ? float(1.0) : float(0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_5.yzw;
    u_xlat16_5.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_31 = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_31 = (-u_xlat16_31) + 4.0;
    u_xlatu30 = uint(u_xlat16_31);
    u_xlati30 = int(int(u_xlatu30) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati30 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati30].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati30 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati30 + 3)].xyz;
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_31 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_31 = u_xlat16_31 * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb30 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb32 = u_xlat4.z>=1.0;
#endif
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_31 = (u_xlatb30) ? 1.0 : u_xlat16_31;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_31 = u_xlat16_31 * u_xlat30;
    u_xlat16_6.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
int u_xlati30;
uint u_xlatu30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat5.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb5 = lessThan(u_xlat5, _CascadeShadowSplitSphereRadii);
    u_xlat16_6.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_5.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_5.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_5.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlat16_5.w = (u_xlatb5.w) ? float(1.0) : float(0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_5.yzw;
    u_xlat16_5.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_31 = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_31 = (-u_xlat16_31) + 4.0;
    u_xlatu30 = uint(u_xlat16_31);
    u_xlati30 = int(int(u_xlatu30) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati30 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati30].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati30 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati30 + 3)].xyz;
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_31 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_31 = u_xlat16_31 * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb30 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb32 = u_xlat4.z>=1.0;
#endif
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_31 = (u_xlatb30) ? 1.0 : u_xlat16_31;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_31 = u_xlat16_31 * u_xlat30;
    u_xlat16_6.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
int u_xlati30;
uint u_xlatu30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat5.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb5 = lessThan(u_xlat5, _CascadeShadowSplitSphereRadii);
    u_xlat16_6.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_5.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_5.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_5.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlat16_5.w = (u_xlatb5.w) ? float(1.0) : float(0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_5.yzw;
    u_xlat16_5.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_31 = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_31 = (-u_xlat16_31) + 4.0;
    u_xlatu30 = uint(u_xlat16_31);
    u_xlati30 = int(int(u_xlatu30) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati30 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati30].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati30 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati30 + 3)].xyz;
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat9.xyz = u_xlat4.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat9.xy,u_xlat9.z);
    u_xlat5.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_31 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_31 = u_xlat16_31 * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb30 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb32 = u_xlat4.z>=1.0;
#endif
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_31 = (u_xlatb30) ? 1.0 : u_xlat16_31;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_31 = u_xlat16_31 * u_xlat30;
    u_xlat16_6.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_Lightmap;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat27;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_Lightmap;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat27;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
attribute highp vec4 in_TEXCOORD1;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp sampler2D unity_Lightmap;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat10_4.xyz = texture2D(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xyz + u_xlat10_4.xyz;
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat27;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_13;
mediump float u_xlat16_17;
float u_xlat33;
int u_xlati33;
uint u_xlatu33;
bool u_xlatb33;
mediump float u_xlat16_34;
float u_xlat35;
bool u_xlatb35;
mediump float u_xlat16_36;
mediump float u_xlat16_39;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_34 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_1.xyz = vec3(u_xlat16_34) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat11.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_34 = dot((-u_xlat11.xyz), u_xlat16_1.xyz);
    u_xlat16_34 = u_xlat16_34 + u_xlat16_34;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_34)) + (-u_xlat11.xyz);
    u_xlat16_34 = dot(u_xlat16_1.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_34 = (-u_xlat16_34) + 1.0;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_39 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_39) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_39 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_39 * u_xlat16_39;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_11.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat35 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat35 = (u_xlatb4.y) ? u_xlat35 : _Metallic;
    u_xlat16_6.x = (-u_xlat35) * 0.959999979 + 0.959999979;
    u_xlat16_17 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_17 = u_xlat0.x + u_xlat16_17;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat35) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_17) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_34) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_11.xyz * u_xlat16_6.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat5.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb5 = lessThan(u_xlat5, _CascadeShadowSplitSphereRadii);
    u_xlat16_6.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_5.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_5.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_5.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlat16_5.w = (u_xlatb5.w) ? float(1.0) : float(0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_5.yzw;
    u_xlat16_5.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_34 = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_34 = (-u_xlat16_34) + 4.0;
    u_xlatu33 = uint(u_xlat16_34);
    u_xlati33 = int(int(u_xlatu33) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati33 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati33].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati33 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati33 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb33 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb35 = u_xlat4.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_36 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb33 = u_xlatb33 || u_xlatb35;
    u_xlat16_34 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_34 = u_xlat16_36 * _MainLightShadowParams.x + u_xlat16_34;
    u_xlat16_34 = (u_xlatb33) ? 1.0 : u_xlat16_34;
    u_xlat16_6.x = (-u_xlat16_34) + 1.0;
    u_xlat16_17 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = vec3(u_xlat16_17) * _MainLightColor.xyz;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_9.xyz = (-u_xlat16_9.xyz) * u_xlat16_6.xxx + u_xlat16_10.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_9.xyz = (-u_xlat16_4.xyz) * vec3(2.0, 2.0, 2.0) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = _MainLightShadowParams.xxx * u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_9.xyz = min(u_xlat16_9.xyz, u_xlat16_10.xyz);
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat33 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_34 = u_xlat16_34 * u_xlat33;
    u_xlat16_34 = u_xlat16_17 * u_xlat16_34;
    u_xlat16_6.xyz = vec3(u_xlat16_34) * _MainLightColor.xyz;
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = max(u_xlat33, 1.17549435e-38);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz;
    u_xlat33 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat16_13 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat33 = u_xlat33 * u_xlat16_13 + 1.00001001;
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat33 = u_xlat16_2 * u_xlat33;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat33 = u_xlat33 * u_xlat16_2;
    u_xlat33 = u_xlat16_1.x / u_xlat33;
    u_xlat16_1.x = u_xlat33 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_13;
mediump float u_xlat16_17;
float u_xlat33;
int u_xlati33;
uint u_xlatu33;
bool u_xlatb33;
mediump float u_xlat16_34;
float u_xlat35;
bool u_xlatb35;
mediump float u_xlat16_36;
mediump float u_xlat16_39;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_34 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_1.xyz = vec3(u_xlat16_34) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat11.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_34 = dot((-u_xlat11.xyz), u_xlat16_1.xyz);
    u_xlat16_34 = u_xlat16_34 + u_xlat16_34;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_34)) + (-u_xlat11.xyz);
    u_xlat16_34 = dot(u_xlat16_1.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_34 = (-u_xlat16_34) + 1.0;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_39 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_39) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_39 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_39 * u_xlat16_39;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_11.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat35 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat35 = (u_xlatb4.y) ? u_xlat35 : _Metallic;
    u_xlat16_6.x = (-u_xlat35) * 0.959999979 + 0.959999979;
    u_xlat16_17 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_17 = u_xlat0.x + u_xlat16_17;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat35) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_17) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_34) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_11.xyz * u_xlat16_6.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat5.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb5 = lessThan(u_xlat5, _CascadeShadowSplitSphereRadii);
    u_xlat16_6.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_5.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_5.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_5.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlat16_5.w = (u_xlatb5.w) ? float(1.0) : float(0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_5.yzw;
    u_xlat16_5.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_34 = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_34 = (-u_xlat16_34) + 4.0;
    u_xlatu33 = uint(u_xlat16_34);
    u_xlati33 = int(int(u_xlatu33) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati33 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati33].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati33 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati33 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb33 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb35 = u_xlat4.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_36 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb33 = u_xlatb33 || u_xlatb35;
    u_xlat16_34 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_34 = u_xlat16_36 * _MainLightShadowParams.x + u_xlat16_34;
    u_xlat16_34 = (u_xlatb33) ? 1.0 : u_xlat16_34;
    u_xlat16_6.x = (-u_xlat16_34) + 1.0;
    u_xlat16_17 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = vec3(u_xlat16_17) * _MainLightColor.xyz;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_9.xyz = (-u_xlat16_9.xyz) * u_xlat16_6.xxx + u_xlat16_10.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_9.xyz = (-u_xlat16_4.xyz) * vec3(2.0, 2.0, 2.0) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = _MainLightShadowParams.xxx * u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_9.xyz = min(u_xlat16_9.xyz, u_xlat16_10.xyz);
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat33 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_34 = u_xlat16_34 * u_xlat33;
    u_xlat16_34 = u_xlat16_17 * u_xlat16_34;
    u_xlat16_6.xyz = vec3(u_xlat16_34) * _MainLightColor.xyz;
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = max(u_xlat33, 1.17549435e-38);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz;
    u_xlat33 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat16_13 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat33 = u_xlat33 * u_xlat16_13 + 1.00001001;
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat33 = u_xlat16_2 * u_xlat33;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat33 = u_xlat33 * u_xlat16_2;
    u_xlat33 = u_xlat16_1.x / u_xlat33;
    u_xlat16_1.x = u_xlat33 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_13;
mediump float u_xlat16_17;
float u_xlat33;
int u_xlati33;
uint u_xlatu33;
bool u_xlatb33;
mediump float u_xlat16_34;
float u_xlat35;
bool u_xlatb35;
mediump float u_xlat16_36;
mediump float u_xlat16_39;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_34 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_1.xyz = vec3(u_xlat16_34) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat11.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_34 = dot((-u_xlat11.xyz), u_xlat16_1.xyz);
    u_xlat16_34 = u_xlat16_34 + u_xlat16_34;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_34)) + (-u_xlat11.xyz);
    u_xlat16_34 = dot(u_xlat16_1.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_34 = (-u_xlat16_34) + 1.0;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_39 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_39) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_39 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_39 * u_xlat16_39;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_11.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat35 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat35 = (u_xlatb4.y) ? u_xlat35 : _Metallic;
    u_xlat16_6.x = (-u_xlat35) * 0.959999979 + 0.959999979;
    u_xlat16_17 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_17 = u_xlat0.x + u_xlat16_17;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat35) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_17) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_34) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_11.xyz * u_xlat16_6.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat5.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb5 = lessThan(u_xlat5, _CascadeShadowSplitSphereRadii);
    u_xlat16_6.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_5.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_5.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_5.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlat16_5.w = (u_xlatb5.w) ? float(1.0) : float(0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_5.yzw;
    u_xlat16_5.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_34 = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_34 = (-u_xlat16_34) + 4.0;
    u_xlatu33 = uint(u_xlat16_34);
    u_xlati33 = int(int(u_xlatu33) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati33 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati33].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati33 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati33 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb33 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb35 = u_xlat4.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_36 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb33 = u_xlatb33 || u_xlatb35;
    u_xlat16_34 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_34 = u_xlat16_36 * _MainLightShadowParams.x + u_xlat16_34;
    u_xlat16_34 = (u_xlatb33) ? 1.0 : u_xlat16_34;
    u_xlat16_6.x = (-u_xlat16_34) + 1.0;
    u_xlat16_17 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = vec3(u_xlat16_17) * _MainLightColor.xyz;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_9.xyz = (-u_xlat16_9.xyz) * u_xlat16_6.xxx + u_xlat16_10.xyz;
    u_xlat16_9.xyz = max(u_xlat16_9.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_9.xyz = (-u_xlat16_4.xyz) * vec3(2.0, 2.0, 2.0) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = _MainLightShadowParams.xxx * u_xlat16_9.xyz + u_xlat16_10.xyz;
    u_xlat16_9.xyz = min(u_xlat16_9.xyz, u_xlat16_10.xyz);
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat33 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_34 = u_xlat16_34 * u_xlat33;
    u_xlat16_34 = u_xlat16_17 * u_xlat16_34;
    u_xlat16_6.xyz = vec3(u_xlat16_34) * _MainLightColor.xyz;
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = max(u_xlat33, 1.17549435e-38);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz;
    u_xlat33 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat16_13 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat33 = u_xlat33 * u_xlat16_13 + 1.00001001;
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat33 = u_xlat16_2 * u_xlat33;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat33 = u_xlat33 * u_xlat16_2;
    u_xlat33 = u_xlat16_1.x / u_xlat33;
    u_xlat16_1.x = u_xlat33 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = max(u_xlat13, 1.17549435e-38);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD2.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD6;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat0.xyz = vs_TEXCOORD6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_28 = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_28, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_28 = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_28 / u_xlat27;
    u_xlat16_28 = u_xlat27 + -6.10351563e-05;
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = min(u_xlat16_28, 100.0);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = max(u_xlat13, 1.17549435e-38);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD2.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD6;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat0.xyz = vs_TEXCOORD6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_28 = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_28, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_28 = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_28 / u_xlat27;
    u_xlat16_28 = u_xlat27 + -6.10351563e-05;
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = min(u_xlat16_28, 100.0);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = max(u_xlat13, 1.17549435e-38);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD2.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD6;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat0.xyz = vs_TEXCOORD6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_28 = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_28, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_28 = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_28 / u_xlat27;
    u_xlat16_28 = u_xlat27 + -6.10351563e-05;
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = min(u_xlat16_28, 100.0);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
int u_xlati27;
uint u_xlatu27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
bool u_xlatb29;
mediump float u_xlat16_30;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat5.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb5 = lessThan(u_xlat5, _CascadeShadowSplitSphereRadii);
    u_xlat16_6.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_5.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_5.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_5.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlat16_5.w = (u_xlatb5.w) ? float(1.0) : float(0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_5.yzw;
    u_xlat16_5.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_28 = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_28 = (-u_xlat16_28) + 4.0;
    u_xlatu27 = uint(u_xlat16_28);
    u_xlati27 = int(int(u_xlatu27) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati27 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati27].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati27 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati27 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb27 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb29 = u_xlat4.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_30 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb27 = u_xlatb27 || u_xlatb29;
    u_xlat16_28 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_28 = u_xlat16_30 * _MainLightShadowParams.x + u_xlat16_28;
    u_xlat16_28 = (u_xlatb27) ? 1.0 : u_xlat16_28;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat27;
    u_xlat16_6.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_28 = u_xlat16_28 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat27 = u_xlat27 * u_xlat16_11 + 1.00001001;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat16_2 * u_xlat27;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_1.x / u_xlat27;
    u_xlat16_1.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
int u_xlati27;
uint u_xlatu27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
bool u_xlatb29;
mediump float u_xlat16_30;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat5.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb5 = lessThan(u_xlat5, _CascadeShadowSplitSphereRadii);
    u_xlat16_6.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_5.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_5.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_5.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlat16_5.w = (u_xlatb5.w) ? float(1.0) : float(0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_5.yzw;
    u_xlat16_5.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_28 = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_28 = (-u_xlat16_28) + 4.0;
    u_xlatu27 = uint(u_xlat16_28);
    u_xlati27 = int(int(u_xlatu27) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati27 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati27].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati27 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati27 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb27 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb29 = u_xlat4.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_30 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb27 = u_xlatb27 || u_xlatb29;
    u_xlat16_28 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_28 = u_xlat16_30 * _MainLightShadowParams.x + u_xlat16_28;
    u_xlat16_28 = (u_xlatb27) ? 1.0 : u_xlat16_28;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat27;
    u_xlat16_6.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_28 = u_xlat16_28 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat27 = u_xlat27 * u_xlat16_11 + 1.00001001;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat16_2 * u_xlat27;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_1.x / u_xlat27;
    u_xlat16_1.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
int u_xlati27;
uint u_xlatu27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
bool u_xlatb29;
mediump float u_xlat16_30;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat5.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat5.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat5.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb5 = lessThan(u_xlat5, _CascadeShadowSplitSphereRadii);
    u_xlat16_6.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_5.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_5.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_5.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlat16_5.w = (u_xlatb5.w) ? float(1.0) : float(0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_5.yzw;
    u_xlat16_5.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_28 = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_28 = (-u_xlat16_28) + 4.0;
    u_xlatu27 = uint(u_xlat16_28);
    u_xlati27 = int(int(u_xlatu27) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati27 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati27].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati27 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati27 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb27 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb29 = u_xlat4.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_30 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb27 = u_xlatb27 || u_xlatb29;
    u_xlat16_28 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_28 = u_xlat16_30 * _MainLightShadowParams.x + u_xlat16_28;
    u_xlat16_28 = (u_xlatb27) ? 1.0 : u_xlat16_28;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat27;
    u_xlat16_6.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_28 = u_xlat16_28 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat27 = u_xlat27 * u_xlat16_11 + 1.00001001;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat16_2 * u_xlat27;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_1.x / u_xlat27;
    u_xlat16_1.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = max(u_xlat13, 1.17549435e-38);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD2.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD6;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat0.xyz = vs_TEXCOORD6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat27;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = max(u_xlat13, 1.17549435e-38);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD2.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD6;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat0.xyz = vs_TEXCOORD6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat27;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = max(u_xlat13, 1.17549435e-38);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD2.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD6;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat0.xyz = vs_TEXCOORD6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat27;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_31 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_37 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = u_xlat16_37 * _MainLightShadowParams.x + u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb30 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb32 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_37 = (u_xlatb30) ? 1.0 : u_xlat16_37;
    u_xlat16_38 = (-u_xlat16_37) + 1.0;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_9.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = (-u_xlat16_6.xyz) * vec3(u_xlat16_38) + u_xlat16_9.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) * vec3(2.0, 2.0, 2.0) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = _MainLightShadowParams.xxx * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_37 * u_xlat30;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_31 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_37 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = u_xlat16_37 * _MainLightShadowParams.x + u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb30 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb32 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_37 = (u_xlatb30) ? 1.0 : u_xlat16_37;
    u_xlat16_38 = (-u_xlat16_37) + 1.0;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_9.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = (-u_xlat16_6.xyz) * vec3(u_xlat16_38) + u_xlat16_9.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) * vec3(2.0, 2.0, 2.0) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = _MainLightShadowParams.xxx * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_37 * u_xlat30;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_31 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_37 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = u_xlat16_37 * _MainLightShadowParams.x + u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb30 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb32 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_37 = (u_xlatb30) ? 1.0 : u_xlat16_37;
    u_xlat16_38 = (-u_xlat16_37) + 1.0;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_9.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = (-u_xlat16_6.xyz) * vec3(u_xlat16_38) + u_xlat16_9.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) * vec3(2.0, 2.0, 2.0) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = _MainLightShadowParams.xxx * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_37 * u_xlat30;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    vs_TEXCOORD2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
bool u_xlatb29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat0.xyz = vs_TEXCOORD6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat16_28 = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.x = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.y = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.z = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.w = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat16_6.x = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15;
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb29 = vs_TEXCOORD8.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb29;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat27 = u_xlat27 * u_xlat16_11 + 1.00001001;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat16_2 * u_xlat27;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_1.x / u_xlat27;
    u_xlat16_1.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    vs_TEXCOORD2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
bool u_xlatb29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat0.xyz = vs_TEXCOORD6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat16_28 = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.x = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.y = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.z = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.w = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat16_6.x = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15;
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb29 = vs_TEXCOORD8.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb29;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat27 = u_xlat27 * u_xlat16_11 + 1.00001001;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat16_2 * u_xlat27;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_1.x / u_xlat27;
    u_xlat16_1.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    vs_TEXCOORD2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
bool u_xlatb29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat0.xyz = vs_TEXCOORD6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat16_28 = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.x = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.y = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.z = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.w = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat16_6.x = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15;
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb29 = vs_TEXCOORD8.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb29;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat27 = u_xlat27 * u_xlat16_11 + 1.00001001;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat16_2 * u_xlat27;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_1.x / u_xlat27;
    u_xlat16_1.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
bool u_xlatb29;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat16_28 = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_6.x = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb29 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb27 = u_xlatb27 || u_xlatb29;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat27 = u_xlat27 * u_xlat16_11 + 1.00001001;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat16_2 * u_xlat27;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_1.x / u_xlat27;
    u_xlat16_1.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
bool u_xlatb29;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat16_28 = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_6.x = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb29 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb27 = u_xlatb27 || u_xlatb29;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat27 = u_xlat27 * u_xlat16_11 + 1.00001001;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat16_2 * u_xlat27;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_1.x / u_xlat27;
    u_xlat16_1.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
bool u_xlatb29;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat16_28 = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_6.x = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb29 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb27 = u_xlatb27 || u_xlatb29;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat27 = u_xlat27 * u_xlat16_11 + 1.00001001;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat16_2 * u_xlat27;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_1.x / u_xlat27;
    u_xlat16_1.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    vs_TEXCOORD2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
bool u_xlatb29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat0.xyz = vs_TEXCOORD6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat16_28 = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.x = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.y = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.z = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.w = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat16_6.x = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15;
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb29 = vs_TEXCOORD8.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb29;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * unity_LightData.z;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat27 = u_xlat27 * u_xlat16_11 + 1.00001001;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat16_2 * u_xlat27;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_1.x / u_xlat27;
    u_xlat16_1.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    vs_TEXCOORD2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
bool u_xlatb29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat0.xyz = vs_TEXCOORD6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat16_28 = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.x = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.y = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.z = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.w = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat16_6.x = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15;
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb29 = vs_TEXCOORD8.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb29;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * unity_LightData.z;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat27 = u_xlat27 * u_xlat16_11 + 1.00001001;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat16_2 * u_xlat27;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_1.x / u_xlat27;
    u_xlat16_1.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    vs_TEXCOORD2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec4 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
bool u_xlatb29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat0.xyz = vs_TEXCOORD6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat16_28 = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.x = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.y = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.z = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat4.xy).x;
    u_xlatb27 = u_xlat27<u_xlat4.z;
    u_xlat5.w = (u_xlatb27) ? 0.0 : 1.0;
    u_xlat16_6.x = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15;
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb29 = vs_TEXCOORD8.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb29;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * unity_LightData.z;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat27 = u_xlat27 * u_xlat16_11 + 1.00001001;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat16_2 * u_xlat27;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_1.x / u_xlat27;
    u_xlat16_1.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_31 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
    u_xlat16_30 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_37 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = u_xlat16_30 * _MainLightShadowParams.x + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb30 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb32 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_37 = (u_xlatb30) ? 1.0 : u_xlat16_37;
    u_xlat16_38 = (-u_xlat16_37) + 1.0;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_9.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = (-u_xlat16_6.xyz) * vec3(u_xlat16_38) + u_xlat16_9.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) * vec3(2.0, 2.0, 2.0) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = _MainLightShadowParams.xxx * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_37 * u_xlat30;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_31 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
    u_xlat16_30 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_37 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = u_xlat16_30 * _MainLightShadowParams.x + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb30 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb32 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_37 = (u_xlatb30) ? 1.0 : u_xlat16_37;
    u_xlat16_38 = (-u_xlat16_37) + 1.0;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_9.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = (-u_xlat16_6.xyz) * vec3(u_xlat16_38) + u_xlat16_9.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) * vec3(2.0, 2.0, 2.0) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = _MainLightShadowParams.xxx * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_37 * u_xlat30;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_12;
mediump float u_xlat16_16;
float u_xlat30;
mediump float u_xlat16_30;
bool u_xlatb30;
mediump float u_xlat16_31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_1.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_36 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_36 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_36 * u_xlat16_36;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat32 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat32 = (u_xlatb4.y) ? u_xlat32 : _Metallic;
    u_xlat16_6.x = (-u_xlat32) * 0.959999979 + 0.959999979;
    u_xlat16_16 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_16 = u_xlat0.x + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat32) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_16) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz;
    u_xlat16_31 = dot(_MainLightPosition.xyz, u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
    u_xlat16_30 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_37 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_37 = u_xlat16_30 * _MainLightShadowParams.x + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb30 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb32 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb30 = u_xlatb30 || u_xlatb32;
    u_xlat16_37 = (u_xlatb30) ? 1.0 : u_xlat16_37;
    u_xlat16_38 = (-u_xlat16_37) + 1.0;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_9.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = (-u_xlat16_6.xyz) * vec3(u_xlat16_38) + u_xlat16_9.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) * vec3(2.0, 2.0, 2.0) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = _MainLightShadowParams.xxx * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = min(u_xlat16_6.xyz, u_xlat16_9.xyz);
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_2 = max(u_xlat16_1.x, 0.100000001);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat16_12 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat30 = u_xlat30 * u_xlat16_12 + 1.00001001;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat30 = u_xlat16_2 * u_xlat30;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_1.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat30 = u_xlat30 * u_xlat16_2;
    u_xlat30 = u_xlat16_1.x / u_xlat30;
    u_xlat16_1.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = min(u_xlat16_1.x, 100.0);
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_37 * u_xlat30;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_6.x;
    u_xlat16_6.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    vs_TEXCOORD2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat0.xyz = vs_TEXCOORD6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb27 = u_xlat27<vs_TEXCOORD8.z;
    u_xlat16_6.x = (u_xlatb27) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_15;
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb2 = vs_TEXCOORD8.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb2;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    vs_TEXCOORD2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat0.xyz = vs_TEXCOORD6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb27 = u_xlat27<vs_TEXCOORD8.z;
    u_xlat16_6.x = (u_xlatb27) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_15;
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb2 = vs_TEXCOORD8.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb2;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    vs_TEXCOORD2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	vec4 unity_ProbesOcclusion;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat0.xyz = vs_TEXCOORD6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb27 = u_xlat27<vs_TEXCOORD8.z;
    u_xlat16_6.x = (u_xlatb27) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_15;
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb2 = vs_TEXCOORD8.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb2;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_27 * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb2 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb27 = u_xlatb27 || u_xlatb2;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_27 * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb2 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb27 = u_xlatb27 || u_xlatb2;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(4) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(5) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(7) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_27 * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb2 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb27 = u_xlatb27 || u_xlatb2;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat27;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    vs_TEXCOORD2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat0.xyz = vs_TEXCOORD6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb27 = u_xlat27<vs_TEXCOORD8.z;
    u_xlat16_6.x = (u_xlatb27) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_15;
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb2 = vs_TEXCOORD8.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb2;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * unity_LightData.z;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    vs_TEXCOORD2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat0.xyz = vs_TEXCOORD6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb27 = u_xlat27<vs_TEXCOORD8.z;
    u_xlat16_6.x = (u_xlatb27) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_15;
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb2 = vs_TEXCOORD8.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb2;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * unity_LightData.z;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec2 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    vs_TEXCOORD2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 unity_WorldTransformParams;
uniform 	mediump vec4 unity_LightData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseNormalMap;
uniform 	float _UseMetallicMap;
uniform 	float _Metallic;
uniform 	float _UseRoughnessMap;
uniform 	float _Glossiness;
uniform 	float _UseEmissiveMap;
uniform 	vec4 _EmissionColor;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _EmissionMap;
uniform lowp sampler2D _MetallicGlossMap;
uniform lowp sampler2D _SpecGlossMap;
uniform highp sampler2D _MainLightShadowmapTexture;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec3 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD8;
#define SV_TARGET0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat10_4.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture2D(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat10_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture2D(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat4 = texture2D(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture2D(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat0.xyz = vs_TEXCOORD6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb27 = u_xlat27<vs_TEXCOORD8.z;
    u_xlat16_6.x = (u_xlatb27) ? 0.0 : _MainLightShadowParams.x;
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_15;
    u_xlatb27 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb2 = vs_TEXCOORD8.z>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb2;
    u_xlat16_6.x = (u_xlatb27) ? 1.0 : u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * unity_LightData.z;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
vec3 u_xlat4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_13;
mediump float u_xlat16_17;
float u_xlat30;
mediump float u_xlat16_30;
mediump float u_xlat16_31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_37;
void main()
{
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    u_xlat16_2.xyz = max(u_xlat16_1.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_2.xyz = (-u_xlat16_0.xyz) * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = _MainLightShadowParams.xxx * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = min(u_xlat16_1.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_31 = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * vec3(u_xlat16_31);
    u_xlat3.y = u_xlat0.x;
    u_xlat3.x = vs_TEXCOORD2.x;
    u_xlat3.z = vs_TEXCOORD1.x;
    u_xlat4.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_5.xyz = texture(_BumpMap, u_xlat4.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb5.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat6.xyz = (u_xlatb5.x) ? u_xlat16_2.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_2.x = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat3.y = u_xlat0.z;
    u_xlat3.x = vs_TEXCOORD2.y;
    u_xlat3.z = vs_TEXCOORD1.y;
    u_xlat16_2.y = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_2.z = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_2.xyz = vec3(u_xlat16_31) * u_xlat16_2.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_2.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_7.xyz = u_xlat16_2.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_2.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat4.xy).x;
    u_xlat0.x = (u_xlatb5.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_32 = (-u_xlat0.x) + 1.0;
    u_xlat16_37 = (-u_xlat16_32) * 0.699999988 + 1.70000005;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_32 = max(u_xlat16_32, 6.10351563e-05);
    u_xlat16_37 = u_xlat16_37 * 6.0;
    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_37);
    u_xlat16_7.x = u_xlat16_6.w + -1.0;
    u_xlat16_7.x = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlat16_7.x = log2(u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.y;
    u_xlat16_7.x = exp2(u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32 + 1.0;
    u_xlat16_37 = float(1.0) / u_xlat16_37;
    u_xlat16_10.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37);
    u_xlat33 = texture(_MetallicGlossMap, u_xlat4.xy).x;
    u_xlat33 = (u_xlatb5.y) ? u_xlat33 : _Metallic;
    u_xlat16_7.x = (-u_xlat33) * 0.959999979 + 0.959999979;
    u_xlat16_17 = (-u_xlat16_7.x) + 1.0;
    u_xlat16_17 = u_xlat0.x + u_xlat16_17;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat5 = texture(_MainTex, u_xlat4.xy);
    u_xlat4.xyz = texture(_EmissionMap, u_xlat4.xy).xyz;
    u_xlat5.xyz = (bool(u_xlatb0)) ? u_xlat5.xyz : _Color.xyz;
    u_xlat16_8.xyz = u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_7.xzw = u_xlat16_7.xxx * u_xlat5.xyz;
    u_xlat16_8.xyz = vec3(u_xlat33) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_9.xyz = vec3(u_xlat16_17) + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_31) * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_9.xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_7.xzw + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat30 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_11.x = u_xlat30 * u_xlat30;
    u_xlat16_30 = max(u_xlat16_11.x, 0.100000001);
    u_xlat16_13 = u_xlat16_32 * u_xlat16_32 + -1.0;
    u_xlat3.x = u_xlat3.x * u_xlat16_13 + 1.00001001;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat30 = u_xlat16_30 * u_xlat3.x;
    u_xlat16_3 = u_xlat16_32 * 4.0 + 2.0;
    u_xlat16_11.x = u_xlat16_32 * u_xlat16_32;
    u_xlat30 = u_xlat30 * u_xlat16_3;
    u_xlat30 = u_xlat16_11.x / u_xlat30;
    u_xlat16_11.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_11.x = max(u_xlat16_11.x, 0.0);
    u_xlat16_11.x = min(u_xlat16_11.x, 100.0);
    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_8.xyz + u_xlat16_7.xzw;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat30;
    u_xlat16_2.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_11.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat5.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
vec3 u_xlat4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_13;
mediump float u_xlat16_17;
float u_xlat30;
mediump float u_xlat16_30;
mediump float u_xlat16_31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_37;
void main()
{
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    u_xlat16_2.xyz = max(u_xlat16_1.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_2.xyz = (-u_xlat16_0.xyz) * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = _MainLightShadowParams.xxx * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = min(u_xlat16_1.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_31 = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * vec3(u_xlat16_31);
    u_xlat3.y = u_xlat0.x;
    u_xlat3.x = vs_TEXCOORD2.x;
    u_xlat3.z = vs_TEXCOORD1.x;
    u_xlat4.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_5.xyz = texture(_BumpMap, u_xlat4.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb5.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat6.xyz = (u_xlatb5.x) ? u_xlat16_2.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_2.x = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat3.y = u_xlat0.z;
    u_xlat3.x = vs_TEXCOORD2.y;
    u_xlat3.z = vs_TEXCOORD1.y;
    u_xlat16_2.y = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_2.z = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_2.xyz = vec3(u_xlat16_31) * u_xlat16_2.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_2.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_7.xyz = u_xlat16_2.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_2.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat4.xy).x;
    u_xlat0.x = (u_xlatb5.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_32 = (-u_xlat0.x) + 1.0;
    u_xlat16_37 = (-u_xlat16_32) * 0.699999988 + 1.70000005;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_32 = max(u_xlat16_32, 6.10351563e-05);
    u_xlat16_37 = u_xlat16_37 * 6.0;
    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_37);
    u_xlat16_7.x = u_xlat16_6.w + -1.0;
    u_xlat16_7.x = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlat16_7.x = log2(u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.y;
    u_xlat16_7.x = exp2(u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32 + 1.0;
    u_xlat16_37 = float(1.0) / u_xlat16_37;
    u_xlat16_10.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37);
    u_xlat33 = texture(_MetallicGlossMap, u_xlat4.xy).x;
    u_xlat33 = (u_xlatb5.y) ? u_xlat33 : _Metallic;
    u_xlat16_7.x = (-u_xlat33) * 0.959999979 + 0.959999979;
    u_xlat16_17 = (-u_xlat16_7.x) + 1.0;
    u_xlat16_17 = u_xlat0.x + u_xlat16_17;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat5 = texture(_MainTex, u_xlat4.xy);
    u_xlat4.xyz = texture(_EmissionMap, u_xlat4.xy).xyz;
    u_xlat5.xyz = (bool(u_xlatb0)) ? u_xlat5.xyz : _Color.xyz;
    u_xlat16_8.xyz = u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_7.xzw = u_xlat16_7.xxx * u_xlat5.xyz;
    u_xlat16_8.xyz = vec3(u_xlat33) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_9.xyz = vec3(u_xlat16_17) + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_31) * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_9.xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_7.xzw + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat30 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_11.x = u_xlat30 * u_xlat30;
    u_xlat16_30 = max(u_xlat16_11.x, 0.100000001);
    u_xlat16_13 = u_xlat16_32 * u_xlat16_32 + -1.0;
    u_xlat3.x = u_xlat3.x * u_xlat16_13 + 1.00001001;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat30 = u_xlat16_30 * u_xlat3.x;
    u_xlat16_3 = u_xlat16_32 * 4.0 + 2.0;
    u_xlat16_11.x = u_xlat16_32 * u_xlat16_32;
    u_xlat30 = u_xlat30 * u_xlat16_3;
    u_xlat30 = u_xlat16_11.x / u_xlat30;
    u_xlat16_11.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_11.x = max(u_xlat16_11.x, 0.0);
    u_xlat16_11.x = min(u_xlat16_11.x, 100.0);
    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_8.xyz + u_xlat16_7.xzw;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat30;
    u_xlat16_2.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_11.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat5.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 _SubtractiveShadowColor;
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
vec3 u_xlat4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_13;
mediump float u_xlat16_17;
float u_xlat30;
mediump float u_xlat16_30;
mediump float u_xlat16_31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_37;
void main()
{
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz + u_xlat16_0.xyz;
    u_xlat16_2.xyz = max(u_xlat16_1.xyz, _SubtractiveShadowColor.xyz);
    u_xlat16_2.xyz = (-u_xlat16_0.xyz) * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = _MainLightShadowParams.xxx * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = min(u_xlat16_1.xyz, u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_31 = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * vec3(u_xlat16_31);
    u_xlat3.y = u_xlat0.x;
    u_xlat3.x = vs_TEXCOORD2.x;
    u_xlat3.z = vs_TEXCOORD1.x;
    u_xlat4.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_5.xyz = texture(_BumpMap, u_xlat4.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb5.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat6.xyz = (u_xlatb5.x) ? u_xlat16_2.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_2.x = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat3.y = u_xlat0.z;
    u_xlat3.x = vs_TEXCOORD2.y;
    u_xlat3.z = vs_TEXCOORD1.y;
    u_xlat16_2.y = dot(u_xlat6.xyz, u_xlat3.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_2.z = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_2.xyz = vec3(u_xlat16_31) * u_xlat16_2.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_31 = dot((-u_xlat10.xyz), u_xlat16_2.xyz);
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
    u_xlat16_7.xyz = u_xlat16_2.xyz * (-vec3(u_xlat16_31)) + (-u_xlat10.xyz);
    u_xlat16_31 = dot(u_xlat16_2.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat4.xy).x;
    u_xlat0.x = (u_xlatb5.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_32 = (-u_xlat0.x) + 1.0;
    u_xlat16_37 = (-u_xlat16_32) * 0.699999988 + 1.70000005;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_32 = max(u_xlat16_32, 6.10351563e-05);
    u_xlat16_37 = u_xlat16_37 * 6.0;
    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_37);
    u_xlat16_7.x = u_xlat16_6.w + -1.0;
    u_xlat16_7.x = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlat16_7.x = log2(u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.y;
    u_xlat16_7.x = exp2(u_xlat16_7.x);
    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32 + 1.0;
    u_xlat16_37 = float(1.0) / u_xlat16_37;
    u_xlat16_10.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37);
    u_xlat33 = texture(_MetallicGlossMap, u_xlat4.xy).x;
    u_xlat33 = (u_xlatb5.y) ? u_xlat33 : _Metallic;
    u_xlat16_7.x = (-u_xlat33) * 0.959999979 + 0.959999979;
    u_xlat16_17 = (-u_xlat16_7.x) + 1.0;
    u_xlat16_17 = u_xlat0.x + u_xlat16_17;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat5 = texture(_MainTex, u_xlat4.xy);
    u_xlat4.xyz = texture(_EmissionMap, u_xlat4.xy).xyz;
    u_xlat5.xyz = (bool(u_xlatb0)) ? u_xlat5.xyz : _Color.xyz;
    u_xlat16_8.xyz = u_xlat5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_7.xzw = u_xlat16_7.xxx * u_xlat5.xyz;
    u_xlat16_8.xyz = vec3(u_xlat33) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_9.xyz = vec3(u_xlat16_17) + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_31) * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_10.xyz * u_xlat16_9.xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_7.xzw + u_xlat16_0.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = max(u_xlat30, 1.17549435e-38);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat30 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_2.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_11.x = u_xlat30 * u_xlat30;
    u_xlat16_30 = max(u_xlat16_11.x, 0.100000001);
    u_xlat16_13 = u_xlat16_32 * u_xlat16_32 + -1.0;
    u_xlat3.x = u_xlat3.x * u_xlat16_13 + 1.00001001;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat30 = u_xlat16_30 * u_xlat3.x;
    u_xlat16_3 = u_xlat16_32 * 4.0 + 2.0;
    u_xlat16_11.x = u_xlat16_32 * u_xlat16_32;
    u_xlat30 = u_xlat30 * u_xlat16_3;
    u_xlat30 = u_xlat16_11.x / u_xlat30;
    u_xlat16_11.x = u_xlat30 + -6.10351563e-05;
    u_xlat16_11.x = max(u_xlat16_11.x, 0.0);
    u_xlat16_11.x = min(u_xlat16_11.x, 100.0);
    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_8.xyz + u_xlat16_7.xzw;
    u_xlat30 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat30;
    u_xlat16_2.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_11.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat5.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat27;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat27;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_11;
mediump float u_xlat16_15;
float u_xlat27;
mediump float u_xlat16_27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat16_28 = dot((-u_xlat9.xyz), u_xlat16_1.xyz);
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
    u_xlat16_6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat16_28)) + (-u_xlat9.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat0.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat0.x = (u_xlatb4.z) ? u_xlat0.x : _Glossiness;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat16_33 = (-u_xlat0.x) + 1.0;
    u_xlat16_7.x = (-u_xlat16_33) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_33 * u_xlat16_7.x;
    u_xlat16_6.w = u_xlat16_33 * u_xlat16_33;
    u_xlat16_7.x = u_xlat16_7.x * 6.0;
    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_7.x);
    u_xlat16_6.x = u_xlat16_5.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.xw = max(u_xlat16_6.xw, vec2(0.0, 6.10351563e-05));
    u_xlat16_6.x = log2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.y;
    u_xlat16_6.x = exp2(u_xlat16_6.x);
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xxx;
    u_xlat16_7.x = u_xlat16_6.w * u_xlat16_6.w + 1.0;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx;
    u_xlat29 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat29 = (u_xlatb4.y) ? u_xlat29 : _Metallic;
    u_xlat16_6.x = (-u_xlat29) * 0.959999979 + 0.959999979;
    u_xlat16_15 = (-u_xlat16_6.x) + 1.0;
    u_xlat16_15 = u_xlat0.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_7.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_6.xxx * u_xlat4.xyz;
    u_xlat16_7.xyz = vec3(u_xlat29) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_6.xyz = vec3(u_xlat16_15) + (-u_xlat16_7.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = texture(unity_Lightmap, vs_TEXCOORD5.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz + u_xlat16_0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = max(u_xlat27, 1.17549435e-38);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_1.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_10.x = u_xlat27 * u_xlat27;
    u_xlat16_27 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_11 = u_xlat16_6.w * u_xlat16_6.w + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat16_11 + 1.00001001;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat27 = u_xlat16_27 * u_xlat2.x;
    u_xlat16_2 = u_xlat16_6.w * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.w * u_xlat16_6.w;
    u_xlat27 = u_xlat27 * u_xlat16_2;
    u_xlat27 = u_xlat16_10.x / u_xlat27;
    u_xlat16_10.x = u_xlat27 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat27 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat27;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat0.xyz + u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.x = (u_xlatb0) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat0.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD2.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(3) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(4) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_0.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat11.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat11.xyz);
    u_xlat16_28 = dot(u_xlat16_0.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_15.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_15.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_11.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
    u_xlat21 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat21 = (u_xlatb4.y) ? u_xlat21 : _Metallic;
    u_xlat16_1.x = (-u_xlat21) * 0.959999979 + 0.959999979;
    u_xlat16_10 = (-u_xlat16_1.x) + 1.0;
    u_xlat16_10 = u_xlat16_10 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_15.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_15.xyz = vec3(u_xlat21) * u_xlat16_15.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = vec3(u_xlat16_10) + (-u_xlat16_15.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz + u_xlat16_15.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_11.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 1.17549435e-38);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat4.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat16_28 = u_xlat29 * u_xlat29;
    u_xlat16_29 = max(u_xlat16_28, 0.100000001);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat21 = u_xlat21 * u_xlat16_4.x + 1.00001001;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat29 = u_xlat16_29 * u_xlat21;
    u_xlat16_21 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_28 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat29 = u_xlat29 * u_xlat16_21;
    u_xlat29 = u_xlat16_28 / u_xlat29;
    u_xlat16_28 = u_xlat29 + -6.10351563e-05;
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = min(u_xlat16_28, 100.0);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_15.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD2.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(3) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(4) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_0.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat11.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat11.xyz);
    u_xlat16_28 = dot(u_xlat16_0.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_15.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_15.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_11.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
    u_xlat21 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat21 = (u_xlatb4.y) ? u_xlat21 : _Metallic;
    u_xlat16_1.x = (-u_xlat21) * 0.959999979 + 0.959999979;
    u_xlat16_10 = (-u_xlat16_1.x) + 1.0;
    u_xlat16_10 = u_xlat16_10 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_15.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_15.xyz = vec3(u_xlat21) * u_xlat16_15.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = vec3(u_xlat16_10) + (-u_xlat16_15.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz + u_xlat16_15.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_11.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 1.17549435e-38);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat4.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat16_28 = u_xlat29 * u_xlat29;
    u_xlat16_29 = max(u_xlat16_28, 0.100000001);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat21 = u_xlat21 * u_xlat16_4.x + 1.00001001;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat29 = u_xlat16_29 * u_xlat21;
    u_xlat16_21 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_28 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat29 = u_xlat29 * u_xlat16_21;
    u_xlat29 = u_xlat16_28 / u_xlat29;
    u_xlat16_28 = u_xlat29 + -6.10351563e-05;
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = min(u_xlat16_28, 100.0);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_15.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD2.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(3) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(4) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_0.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat11.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat11.xyz);
    u_xlat16_28 = dot(u_xlat16_0.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_15.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_15.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_11.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
    u_xlat21 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat21 = (u_xlatb4.y) ? u_xlat21 : _Metallic;
    u_xlat16_1.x = (-u_xlat21) * 0.959999979 + 0.959999979;
    u_xlat16_10 = (-u_xlat16_1.x) + 1.0;
    u_xlat16_10 = u_xlat16_10 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
#else
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_15.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_15.xyz = vec3(u_xlat21) * u_xlat16_15.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = vec3(u_xlat16_10) + (-u_xlat16_15.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz + u_xlat16_15.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_11.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 1.17549435e-38);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat4.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * unity_LightData.z;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat16_28 = u_xlat29 * u_xlat29;
    u_xlat16_29 = max(u_xlat16_28, 0.100000001);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat21 = u_xlat21 * u_xlat16_4.x + 1.00001001;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat29 = u_xlat16_29 * u_xlat21;
    u_xlat16_21 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_28 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat29 = u_xlat29 * u_xlat16_21;
    u_xlat29 = u_xlat16_28 / u_xlat29;
    u_xlat16_28 = u_xlat29 + -6.10351563e-05;
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = min(u_xlat16_28, 100.0);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_15.xyz + u_xlat16_8.xyz;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD2.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(3) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(4) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_0.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat11.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat11.xyz);
    u_xlat16_28 = dot(u_xlat16_0.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_15.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_15.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_11.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
    u_xlat21 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat21 = (u_xlatb4.y) ? u_xlat21 : _Metallic;
    u_xlat16_1.x = (-u_xlat21) * 0.959999979 + 0.959999979;
    u_xlat16_10.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_10.x = u_xlat16_10.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_15.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_15.xyz = vec3(u_xlat21) * u_xlat16_15.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = u_xlat16_10.xxx + (-u_xlat16_15.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz + u_xlat16_15.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_11.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 1.17549435e-38);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat4.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat16_10.x = u_xlat29 * u_xlat29;
    u_xlat16_29 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat21 = u_xlat21 * u_xlat16_4.x + 1.00001001;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat29 = u_xlat16_29 * u_xlat21;
    u_xlat16_21 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat29 = u_xlat29 * u_xlat16_21;
    u_xlat29 = u_xlat16_10.x / u_xlat29;
    u_xlat16_10.x = u_xlat29 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_15.xyz + u_xlat16_8.xyz;
    u_xlat29 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat29;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD2.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(3) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(4) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_0.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat11.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat11.xyz);
    u_xlat16_28 = dot(u_xlat16_0.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_15.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_15.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_11.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
    u_xlat21 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat21 = (u_xlatb4.y) ? u_xlat21 : _Metallic;
    u_xlat16_1.x = (-u_xlat21) * 0.959999979 + 0.959999979;
    u_xlat16_10.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_10.x = u_xlat16_10.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_15.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_15.xyz = vec3(u_xlat21) * u_xlat16_15.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = u_xlat16_10.xxx + (-u_xlat16_15.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz + u_xlat16_15.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_11.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 1.17549435e-38);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat4.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat16_10.x = u_xlat29 * u_xlat29;
    u_xlat16_29 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat21 = u_xlat21 * u_xlat16_4.x + 1.00001001;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat29 = u_xlat16_29 * u_xlat21;
    u_xlat16_21 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat29 = u_xlat29 * u_xlat16_21;
    u_xlat29 = u_xlat16_10.x / u_xlat29;
    u_xlat16_10.x = u_xlat29 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_15.xyz + u_xlat16_8.xyz;
    u_xlat29 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat29;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD2.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(3) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(4) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_0.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat11.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat11.xyz);
    u_xlat16_28 = dot(u_xlat16_0.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_15.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_15.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_11.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
    u_xlat21 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat21 = (u_xlatb4.y) ? u_xlat21 : _Metallic;
    u_xlat16_1.x = (-u_xlat21) * 0.959999979 + 0.959999979;
    u_xlat16_10.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_10.x = u_xlat16_10.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_15.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_15.xyz = vec3(u_xlat21) * u_xlat16_15.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = u_xlat16_10.xxx + (-u_xlat16_15.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz + u_xlat16_15.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_11.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 1.17549435e-38);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat4.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat16_10.x = u_xlat29 * u_xlat29;
    u_xlat16_29 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat21 = u_xlat21 * u_xlat16_4.x + 1.00001001;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat29 = u_xlat16_29 * u_xlat21;
    u_xlat16_21 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat29 = u_xlat29 * u_xlat16_21;
    u_xlat29 = u_xlat16_10.x / u_xlat29;
    u_xlat16_10.x = u_xlat29 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_15.xyz + u_xlat16_8.xyz;
    u_xlat29 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat29;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD2.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_16;
float u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
mediump float u_xlat16_31;
float u_xlat32;
int u_xlati32;
uint u_xlatu32;
bool u_xlatb32;
mediump float u_xlat16_38;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_0.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat12.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat12.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat12.xyz);
    u_xlat16_31 = dot(u_xlat16_0.xyz, u_xlat12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_16.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_16.x = u_xlat16_16.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_16.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_16.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_12.xyz = u_xlat16_1.xyz * u_xlat16_16.xxx;
    u_xlat23 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat23 = (u_xlatb4.y) ? u_xlat23 : _Metallic;
    u_xlat16_1.x = (-u_xlat23) * 0.959999979 + 0.959999979;
    u_xlat16_11 = (-u_xlat16_1.x) + 1.0;
    u_xlat16_11 = u_xlat16_11 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_16.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_16.xyz = vec3(u_xlat23) * u_xlat16_16.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = vec3(u_xlat16_11) + (-u_xlat16_16.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_16.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_12.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat1.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_9.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_9.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_9.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_1.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_1.yzw;
    u_xlat16_1.yzw = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_38 = dot(u_xlat16_1, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_38 = (-u_xlat16_38) + 4.0;
    u_xlatu32 = uint(u_xlat16_38);
    u_xlati32 = int(int(u_xlatu32) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati32].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 3)].xyz;
    u_xlat7.xyz = u_xlat4.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat7.xyz = u_xlat4.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat1.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat7.xyz = u_xlat4.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat1.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat7.xyz = u_xlat4.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat1.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_38 = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_9.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_38 = u_xlat16_38 * _MainLightShadowParams.x + u_xlat16_9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb32 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb23 = u_xlat4.z>=1.0;
#endif
    u_xlatb32 = u_xlatb32 || u_xlatb23;
    u_xlat16_38 = (u_xlatb32) ? 1.0 : u_xlat16_38;
    u_xlat32 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_38 = u_xlat16_38 * u_xlat32;
    u_xlat16_9.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat16_38 * u_xlat16_9.x;
    u_xlat16_9.xyz = vec3(u_xlat16_38) * _MainLightColor.xyz;
    u_xlat32 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat32 = max(u_xlat32, 1.17549435e-38);
    u_xlat32 = inversesqrt(u_xlat32);
    u_xlat4.xyz = vec3(u_xlat32) * u_xlat5.xyz;
    u_xlat32 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
#else
    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
#endif
    u_xlat23 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat23 * u_xlat23;
    u_xlat16_23 = max(u_xlat16_38, 0.100000001);
    u_xlat32 = u_xlat32 * u_xlat32;
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat32 = u_xlat32 * u_xlat16_4.x + 1.00001001;
    u_xlat32 = u_xlat32 * u_xlat32;
    u_xlat32 = u_xlat16_23 * u_xlat32;
    u_xlat16_23 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat32 = u_xlat32 * u_xlat16_23;
    u_xlat32 = u_xlat16_6.x / u_xlat32;
    u_xlat16_6.x = u_xlat32 + -6.10351563e-05;
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = min(u_xlat16_6.x, 100.0);
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_16.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat2.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD2.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_16;
float u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
mediump float u_xlat16_31;
float u_xlat32;
int u_xlati32;
uint u_xlatu32;
bool u_xlatb32;
mediump float u_xlat16_38;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_0.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat12.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat12.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat12.xyz);
    u_xlat16_31 = dot(u_xlat16_0.xyz, u_xlat12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_16.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_16.x = u_xlat16_16.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_16.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_16.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_12.xyz = u_xlat16_1.xyz * u_xlat16_16.xxx;
    u_xlat23 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat23 = (u_xlatb4.y) ? u_xlat23 : _Metallic;
    u_xlat16_1.x = (-u_xlat23) * 0.959999979 + 0.959999979;
    u_xlat16_11 = (-u_xlat16_1.x) + 1.0;
    u_xlat16_11 = u_xlat16_11 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_16.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_16.xyz = vec3(u_xlat23) * u_xlat16_16.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = vec3(u_xlat16_11) + (-u_xlat16_16.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_16.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_12.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat1.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_9.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_9.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_9.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_1.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_1.yzw;
    u_xlat16_1.yzw = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_38 = dot(u_xlat16_1, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_38 = (-u_xlat16_38) + 4.0;
    u_xlatu32 = uint(u_xlat16_38);
    u_xlati32 = int(int(u_xlatu32) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati32].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 3)].xyz;
    u_xlat7.xyz = u_xlat4.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat7.xyz = u_xlat4.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat1.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat7.xyz = u_xlat4.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat1.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat7.xyz = u_xlat4.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat1.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_38 = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_9.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_38 = u_xlat16_38 * _MainLightShadowParams.x + u_xlat16_9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb32 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb23 = u_xlat4.z>=1.0;
#endif
    u_xlatb32 = u_xlatb32 || u_xlatb23;
    u_xlat16_38 = (u_xlatb32) ? 1.0 : u_xlat16_38;
    u_xlat32 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_38 = u_xlat16_38 * u_xlat32;
    u_xlat16_9.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat16_38 * u_xlat16_9.x;
    u_xlat16_9.xyz = vec3(u_xlat16_38) * _MainLightColor.xyz;
    u_xlat32 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat32 = max(u_xlat32, 1.17549435e-38);
    u_xlat32 = inversesqrt(u_xlat32);
    u_xlat4.xyz = vec3(u_xlat32) * u_xlat5.xyz;
    u_xlat32 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
#else
    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
#endif
    u_xlat23 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat23 * u_xlat23;
    u_xlat16_23 = max(u_xlat16_38, 0.100000001);
    u_xlat32 = u_xlat32 * u_xlat32;
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat32 = u_xlat32 * u_xlat16_4.x + 1.00001001;
    u_xlat32 = u_xlat32 * u_xlat32;
    u_xlat32 = u_xlat16_23 * u_xlat32;
    u_xlat16_23 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat32 = u_xlat32 * u_xlat16_23;
    u_xlat32 = u_xlat16_6.x / u_xlat32;
    u_xlat16_6.x = u_xlat32 + -6.10351563e-05;
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = min(u_xlat16_6.x, 100.0);
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_16.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat2.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD2.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_16;
float u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
mediump float u_xlat16_31;
float u_xlat32;
int u_xlati32;
uint u_xlatu32;
bool u_xlatb32;
mediump float u_xlat16_38;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_0.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat12.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat12.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat12.xyz);
    u_xlat16_31 = dot(u_xlat16_0.xyz, u_xlat12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_16.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_16.x = u_xlat16_16.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_16.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_16.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_12.xyz = u_xlat16_1.xyz * u_xlat16_16.xxx;
    u_xlat23 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat23 = (u_xlatb4.y) ? u_xlat23 : _Metallic;
    u_xlat16_1.x = (-u_xlat23) * 0.959999979 + 0.959999979;
    u_xlat16_11 = (-u_xlat16_1.x) + 1.0;
    u_xlat16_11 = u_xlat16_11 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_16.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_16.xyz = vec3(u_xlat23) * u_xlat16_16.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = vec3(u_xlat16_11) + (-u_xlat16_16.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_16.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_12.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat1.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_9.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_9.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_9.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_1.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_1.yzw;
    u_xlat16_1.yzw = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_38 = dot(u_xlat16_1, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_38 = (-u_xlat16_38) + 4.0;
    u_xlatu32 = uint(u_xlat16_38);
    u_xlati32 = int(int(u_xlatu32) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati32].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 3)].xyz;
    u_xlat7.xyz = u_xlat4.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat7.xyz = u_xlat4.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat1.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat7.xyz = u_xlat4.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat1.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat7.xyz = u_xlat4.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat1.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_38 = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_9.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_38 = u_xlat16_38 * _MainLightShadowParams.x + u_xlat16_9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb32 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb23 = u_xlat4.z>=1.0;
#endif
    u_xlatb32 = u_xlatb32 || u_xlatb23;
    u_xlat16_38 = (u_xlatb32) ? 1.0 : u_xlat16_38;
    u_xlat32 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_38 = u_xlat16_38 * u_xlat32;
    u_xlat16_9.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat16_38 * u_xlat16_9.x;
    u_xlat16_9.xyz = vec3(u_xlat16_38) * _MainLightColor.xyz;
    u_xlat32 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat32 = max(u_xlat32, 1.17549435e-38);
    u_xlat32 = inversesqrt(u_xlat32);
    u_xlat4.xyz = vec3(u_xlat32) * u_xlat5.xyz;
    u_xlat32 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
#else
    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
#endif
    u_xlat23 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat23 * u_xlat23;
    u_xlat16_23 = max(u_xlat16_38, 0.100000001);
    u_xlat32 = u_xlat32 * u_xlat32;
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat32 = u_xlat32 * u_xlat16_4.x + 1.00001001;
    u_xlat32 = u_xlat32 * u_xlat32;
    u_xlat32 = u_xlat16_23 * u_xlat32;
    u_xlat16_23 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat32 = u_xlat32 * u_xlat16_23;
    u_xlat32 = u_xlat16_6.x / u_xlat32;
    u_xlat16_6.x = u_xlat32 + -6.10351563e-05;
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = min(u_xlat16_6.x, 100.0);
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_16.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat2.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD2.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_16;
float u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
mediump float u_xlat16_31;
float u_xlat32;
int u_xlati32;
uint u_xlatu32;
bool u_xlatb32;
mediump float u_xlat16_38;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_0.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat12.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat12.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat12.xyz);
    u_xlat16_31 = dot(u_xlat16_0.xyz, u_xlat12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_16.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_16.x = u_xlat16_16.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_16.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_16.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_12.xyz = u_xlat16_1.xyz * u_xlat16_16.xxx;
    u_xlat23 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat23 = (u_xlatb4.y) ? u_xlat23 : _Metallic;
    u_xlat16_1.x = (-u_xlat23) * 0.959999979 + 0.959999979;
    u_xlat16_11 = (-u_xlat16_1.x) + 1.0;
    u_xlat16_11 = u_xlat16_11 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_16.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_16.xyz = vec3(u_xlat23) * u_xlat16_16.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = vec3(u_xlat16_11) + (-u_xlat16_16.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_16.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_12.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat1.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_9.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_9.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_9.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_1.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_1.yzw;
    u_xlat16_1.yzw = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_38 = dot(u_xlat16_1, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_38 = (-u_xlat16_38) + 4.0;
    u_xlatu32 = uint(u_xlat16_38);
    u_xlati32 = int(int(u_xlatu32) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati32].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 3)].xyz;
    u_xlat7.xyz = u_xlat4.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat7.xyz = u_xlat4.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat1.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat7.xyz = u_xlat4.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat1.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat7.xyz = u_xlat4.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat1.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_38 = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_9.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_38 = u_xlat16_38 * _MainLightShadowParams.x + u_xlat16_9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb32 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb23 = u_xlat4.z>=1.0;
#endif
    u_xlatb32 = u_xlatb32 || u_xlatb23;
    u_xlat16_38 = (u_xlatb32) ? 1.0 : u_xlat16_38;
    u_xlat16_38 = u_xlat16_38 * unity_LightData.z;
    u_xlat16_9.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat16_38 * u_xlat16_9.x;
    u_xlat16_9.xyz = vec3(u_xlat16_38) * _MainLightColor.xyz;
    u_xlat32 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat32 = max(u_xlat32, 1.17549435e-38);
    u_xlat32 = inversesqrt(u_xlat32);
    u_xlat4.xyz = vec3(u_xlat32) * u_xlat5.xyz;
    u_xlat32 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
#else
    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
#endif
    u_xlat23 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat23 * u_xlat23;
    u_xlat16_23 = max(u_xlat16_38, 0.100000001);
    u_xlat32 = u_xlat32 * u_xlat32;
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat32 = u_xlat32 * u_xlat16_4.x + 1.00001001;
    u_xlat32 = u_xlat32 * u_xlat32;
    u_xlat32 = u_xlat16_23 * u_xlat32;
    u_xlat16_23 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat32 = u_xlat32 * u_xlat16_23;
    u_xlat32 = u_xlat16_6.x / u_xlat32;
    u_xlat16_6.x = u_xlat32 + -6.10351563e-05;
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = min(u_xlat16_6.x, 100.0);
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_16.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat2.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD2.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_16;
float u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
mediump float u_xlat16_31;
float u_xlat32;
int u_xlati32;
uint u_xlatu32;
bool u_xlatb32;
mediump float u_xlat16_38;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_0.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat12.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat12.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat12.xyz);
    u_xlat16_31 = dot(u_xlat16_0.xyz, u_xlat12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_16.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_16.x = u_xlat16_16.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_16.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_16.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_12.xyz = u_xlat16_1.xyz * u_xlat16_16.xxx;
    u_xlat23 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat23 = (u_xlatb4.y) ? u_xlat23 : _Metallic;
    u_xlat16_1.x = (-u_xlat23) * 0.959999979 + 0.959999979;
    u_xlat16_11 = (-u_xlat16_1.x) + 1.0;
    u_xlat16_11 = u_xlat16_11 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_16.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_16.xyz = vec3(u_xlat23) * u_xlat16_16.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = vec3(u_xlat16_11) + (-u_xlat16_16.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_16.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_12.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat1.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_9.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_9.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_9.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_1.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_1.yzw;
    u_xlat16_1.yzw = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_38 = dot(u_xlat16_1, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_38 = (-u_xlat16_38) + 4.0;
    u_xlatu32 = uint(u_xlat16_38);
    u_xlati32 = int(int(u_xlatu32) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati32].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 3)].xyz;
    u_xlat7.xyz = u_xlat4.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat7.xyz = u_xlat4.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat1.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat7.xyz = u_xlat4.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat1.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat7.xyz = u_xlat4.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat1.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_38 = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_9.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_38 = u_xlat16_38 * _MainLightShadowParams.x + u_xlat16_9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb32 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb23 = u_xlat4.z>=1.0;
#endif
    u_xlatb32 = u_xlatb32 || u_xlatb23;
    u_xlat16_38 = (u_xlatb32) ? 1.0 : u_xlat16_38;
    u_xlat16_38 = u_xlat16_38 * unity_LightData.z;
    u_xlat16_9.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat16_38 * u_xlat16_9.x;
    u_xlat16_9.xyz = vec3(u_xlat16_38) * _MainLightColor.xyz;
    u_xlat32 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat32 = max(u_xlat32, 1.17549435e-38);
    u_xlat32 = inversesqrt(u_xlat32);
    u_xlat4.xyz = vec3(u_xlat32) * u_xlat5.xyz;
    u_xlat32 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
#else
    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
#endif
    u_xlat23 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat23 * u_xlat23;
    u_xlat16_23 = max(u_xlat16_38, 0.100000001);
    u_xlat32 = u_xlat32 * u_xlat32;
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat32 = u_xlat32 * u_xlat16_4.x + 1.00001001;
    u_xlat32 = u_xlat32 * u_xlat32;
    u_xlat32 = u_xlat16_23 * u_xlat32;
    u_xlat16_23 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat32 = u_xlat32 * u_xlat16_23;
    u_xlat32 = u_xlat16_6.x / u_xlat32;
    u_xlat16_6.x = u_xlat32 + -6.10351563e-05;
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = min(u_xlat16_6.x, 100.0);
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_16.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat2.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD2.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_16;
float u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
mediump float u_xlat16_31;
float u_xlat32;
int u_xlati32;
uint u_xlatu32;
bool u_xlatb32;
mediump float u_xlat16_38;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_0.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat12.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat12.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat12.xyz);
    u_xlat16_31 = dot(u_xlat16_0.xyz, u_xlat12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_16.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_16.x = u_xlat16_16.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_16.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_16.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_12.xyz = u_xlat16_1.xyz * u_xlat16_16.xxx;
    u_xlat23 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat23 = (u_xlatb4.y) ? u_xlat23 : _Metallic;
    u_xlat16_1.x = (-u_xlat23) * 0.959999979 + 0.959999979;
    u_xlat16_11 = (-u_xlat16_1.x) + 1.0;
    u_xlat16_11 = u_xlat16_11 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_16.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_16.xyz = vec3(u_xlat23) * u_xlat16_16.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = vec3(u_xlat16_11) + (-u_xlat16_16.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_16.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_12.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat1.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_9.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_9.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_9.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_1.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_1.yzw;
    u_xlat16_1.yzw = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_38 = dot(u_xlat16_1, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_38 = (-u_xlat16_38) + 4.0;
    u_xlatu32 = uint(u_xlat16_38);
    u_xlati32 = int(int(u_xlatu32) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati32].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 3)].xyz;
    u_xlat7.xyz = u_xlat4.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat7.xyz = u_xlat4.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat1.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat7.xyz = u_xlat4.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat1.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat7.xyz = u_xlat4.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat7.xy,u_xlat7.z);
    u_xlat1.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_38 = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_9.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_38 = u_xlat16_38 * _MainLightShadowParams.x + u_xlat16_9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb32 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb23 = u_xlat4.z>=1.0;
#endif
    u_xlatb32 = u_xlatb32 || u_xlatb23;
    u_xlat16_38 = (u_xlatb32) ? 1.0 : u_xlat16_38;
    u_xlat16_38 = u_xlat16_38 * unity_LightData.z;
    u_xlat16_9.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat16_38 * u_xlat16_9.x;
    u_xlat16_9.xyz = vec3(u_xlat16_38) * _MainLightColor.xyz;
    u_xlat32 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat32 = max(u_xlat32, 1.17549435e-38);
    u_xlat32 = inversesqrt(u_xlat32);
    u_xlat4.xyz = vec3(u_xlat32) * u_xlat5.xyz;
    u_xlat32 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
#else
    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
#endif
    u_xlat23 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat23 * u_xlat23;
    u_xlat16_23 = max(u_xlat16_38, 0.100000001);
    u_xlat32 = u_xlat32 * u_xlat32;
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat32 = u_xlat32 * u_xlat16_4.x + 1.00001001;
    u_xlat32 = u_xlat32 * u_xlat32;
    u_xlat32 = u_xlat16_23 * u_xlat32;
    u_xlat16_23 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat32 = u_xlat32 * u_xlat16_23;
    u_xlat32 = u_xlat16_6.x / u_xlat32;
    u_xlat16_6.x = u_xlat32 + -6.10351563e-05;
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = min(u_xlat16_6.x, 100.0);
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_16.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat2.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD2.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_16;
float u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
mediump float u_xlat16_31;
float u_xlat32;
int u_xlati32;
uint u_xlatu32;
bool u_xlatb32;
mediump float u_xlat16_38;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_0.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat12.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat12.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat12.xyz);
    u_xlat16_31 = dot(u_xlat16_0.xyz, u_xlat12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_16.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_16.x = u_xlat16_16.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_16.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_16.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_12.xyz = u_xlat16_1.xyz * u_xlat16_16.xxx;
    u_xlat23 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat23 = (u_xlatb4.y) ? u_xlat23 : _Metallic;
    u_xlat16_1.x = (-u_xlat23) * 0.959999979 + 0.959999979;
    u_xlat16_11 = (-u_xlat16_1.x) + 1.0;
    u_xlat16_11 = u_xlat16_11 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_16.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_16.xyz = vec3(u_xlat23) * u_xlat16_16.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = vec3(u_xlat16_11) + (-u_xlat16_16.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_16.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_12.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat1.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_9.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_9.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_9.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_1.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_1.yzw;
    u_xlat16_1.yzw = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_38 = dot(u_xlat16_1, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_38 = (-u_xlat16_38) + 4.0;
    u_xlatu32 = uint(u_xlat16_38);
    u_xlati32 = int(int(u_xlatu32) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati32].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb32 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb23 = u_xlat4.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_4.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb32 = u_xlatb32 || u_xlatb23;
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_38 = u_xlat16_4.x * _MainLightShadowParams.x + u_xlat16_38;
    u_xlat16_38 = (u_xlatb32) ? 1.0 : u_xlat16_38;
    u_xlat32 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_38 = u_xlat16_38 * u_xlat32;
    u_xlat16_9.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat16_38 * u_xlat16_9.x;
    u_xlat16_9.xyz = vec3(u_xlat16_38) * _MainLightColor.xyz;
    u_xlat32 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat32 = max(u_xlat32, 1.17549435e-38);
    u_xlat32 = inversesqrt(u_xlat32);
    u_xlat4.xyz = vec3(u_xlat32) * u_xlat5.xyz;
    u_xlat32 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
#else
    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
#endif
    u_xlat23 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat23 * u_xlat23;
    u_xlat16_23 = max(u_xlat16_38, 0.100000001);
    u_xlat32 = u_xlat32 * u_xlat32;
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat32 = u_xlat32 * u_xlat16_4.x + 1.00001001;
    u_xlat32 = u_xlat32 * u_xlat32;
    u_xlat32 = u_xlat16_23 * u_xlat32;
    u_xlat16_23 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat32 = u_xlat32 * u_xlat16_23;
    u_xlat32 = u_xlat16_6.x / u_xlat32;
    u_xlat16_6.x = u_xlat32 + -6.10351563e-05;
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = min(u_xlat16_6.x, 100.0);
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_16.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat2.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD2.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_16;
float u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
mediump float u_xlat16_31;
float u_xlat32;
int u_xlati32;
uint u_xlatu32;
bool u_xlatb32;
mediump float u_xlat16_38;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_0.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat12.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat12.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat12.xyz);
    u_xlat16_31 = dot(u_xlat16_0.xyz, u_xlat12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_16.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_16.x = u_xlat16_16.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_16.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_16.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_12.xyz = u_xlat16_1.xyz * u_xlat16_16.xxx;
    u_xlat23 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat23 = (u_xlatb4.y) ? u_xlat23 : _Metallic;
    u_xlat16_1.x = (-u_xlat23) * 0.959999979 + 0.959999979;
    u_xlat16_11 = (-u_xlat16_1.x) + 1.0;
    u_xlat16_11 = u_xlat16_11 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_16.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_16.xyz = vec3(u_xlat23) * u_xlat16_16.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = vec3(u_xlat16_11) + (-u_xlat16_16.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_16.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_12.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat1.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_9.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_9.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_9.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_1.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_1.yzw;
    u_xlat16_1.yzw = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_38 = dot(u_xlat16_1, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_38 = (-u_xlat16_38) + 4.0;
    u_xlatu32 = uint(u_xlat16_38);
    u_xlati32 = int(int(u_xlatu32) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati32].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb32 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb23 = u_xlat4.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_4.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb32 = u_xlatb32 || u_xlatb23;
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_38 = u_xlat16_4.x * _MainLightShadowParams.x + u_xlat16_38;
    u_xlat16_38 = (u_xlatb32) ? 1.0 : u_xlat16_38;
    u_xlat32 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_38 = u_xlat16_38 * u_xlat32;
    u_xlat16_9.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat16_38 * u_xlat16_9.x;
    u_xlat16_9.xyz = vec3(u_xlat16_38) * _MainLightColor.xyz;
    u_xlat32 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat32 = max(u_xlat32, 1.17549435e-38);
    u_xlat32 = inversesqrt(u_xlat32);
    u_xlat4.xyz = vec3(u_xlat32) * u_xlat5.xyz;
    u_xlat32 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
#else
    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
#endif
    u_xlat23 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat23 * u_xlat23;
    u_xlat16_23 = max(u_xlat16_38, 0.100000001);
    u_xlat32 = u_xlat32 * u_xlat32;
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat32 = u_xlat32 * u_xlat16_4.x + 1.00001001;
    u_xlat32 = u_xlat32 * u_xlat32;
    u_xlat32 = u_xlat16_23 * u_xlat32;
    u_xlat16_23 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat32 = u_xlat32 * u_xlat16_23;
    u_xlat32 = u_xlat16_6.x / u_xlat32;
    u_xlat16_6.x = u_xlat32 + -6.10351563e-05;
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = min(u_xlat16_6.x, 100.0);
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_16.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat2.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD2.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_16;
float u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
mediump float u_xlat16_31;
float u_xlat32;
int u_xlati32;
uint u_xlatu32;
bool u_xlatb32;
mediump float u_xlat16_38;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_0.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat12.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat12.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat12.xyz);
    u_xlat16_31 = dot(u_xlat16_0.xyz, u_xlat12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_16.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_16.x = u_xlat16_16.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_16.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_16.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_12.xyz = u_xlat16_1.xyz * u_xlat16_16.xxx;
    u_xlat23 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat23 = (u_xlatb4.y) ? u_xlat23 : _Metallic;
    u_xlat16_1.x = (-u_xlat23) * 0.959999979 + 0.959999979;
    u_xlat16_11 = (-u_xlat16_1.x) + 1.0;
    u_xlat16_11 = u_xlat16_11 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_16.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_16.xyz = vec3(u_xlat23) * u_xlat16_16.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = vec3(u_xlat16_11) + (-u_xlat16_16.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_16.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_12.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat1.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_9.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_9.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_9.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_1.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_1.yzw;
    u_xlat16_1.yzw = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_38 = dot(u_xlat16_1, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_38 = (-u_xlat16_38) + 4.0;
    u_xlatu32 = uint(u_xlat16_38);
    u_xlati32 = int(int(u_xlatu32) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati32].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb32 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb23 = u_xlat4.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_4.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb32 = u_xlatb32 || u_xlatb23;
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_38 = u_xlat16_4.x * _MainLightShadowParams.x + u_xlat16_38;
    u_xlat16_38 = (u_xlatb32) ? 1.0 : u_xlat16_38;
    u_xlat32 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_38 = u_xlat16_38 * u_xlat32;
    u_xlat16_9.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat16_38 * u_xlat16_9.x;
    u_xlat16_9.xyz = vec3(u_xlat16_38) * _MainLightColor.xyz;
    u_xlat32 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat32 = max(u_xlat32, 1.17549435e-38);
    u_xlat32 = inversesqrt(u_xlat32);
    u_xlat4.xyz = vec3(u_xlat32) * u_xlat5.xyz;
    u_xlat32 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
#else
    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
#endif
    u_xlat23 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat23 * u_xlat23;
    u_xlat16_23 = max(u_xlat16_38, 0.100000001);
    u_xlat32 = u_xlat32 * u_xlat32;
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat32 = u_xlat32 * u_xlat16_4.x + 1.00001001;
    u_xlat32 = u_xlat32 * u_xlat32;
    u_xlat32 = u_xlat16_23 * u_xlat32;
    u_xlat16_23 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat32 = u_xlat32 * u_xlat16_23;
    u_xlat32 = u_xlat16_6.x / u_xlat32;
    u_xlat16_6.x = u_xlat32 + -6.10351563e-05;
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = min(u_xlat16_6.x, 100.0);
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_16.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat2.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD2.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_16;
float u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
mediump float u_xlat16_31;
float u_xlat32;
int u_xlati32;
uint u_xlatu32;
bool u_xlatb32;
mediump float u_xlat16_38;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_0.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat12.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat12.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat12.xyz);
    u_xlat16_31 = dot(u_xlat16_0.xyz, u_xlat12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_16.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_16.x = u_xlat16_16.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_16.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_16.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_12.xyz = u_xlat16_1.xyz * u_xlat16_16.xxx;
    u_xlat23 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat23 = (u_xlatb4.y) ? u_xlat23 : _Metallic;
    u_xlat16_1.x = (-u_xlat23) * 0.959999979 + 0.959999979;
    u_xlat16_11 = (-u_xlat16_1.x) + 1.0;
    u_xlat16_11 = u_xlat16_11 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_16.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_16.xyz = vec3(u_xlat23) * u_xlat16_16.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = vec3(u_xlat16_11) + (-u_xlat16_16.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_16.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_12.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat1.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_9.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_9.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_9.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_1.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_1.yzw;
    u_xlat16_1.yzw = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_38 = dot(u_xlat16_1, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_38 = (-u_xlat16_38) + 4.0;
    u_xlatu32 = uint(u_xlat16_38);
    u_xlati32 = int(int(u_xlatu32) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati32].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb32 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb23 = u_xlat4.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_4.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb32 = u_xlatb32 || u_xlatb23;
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_38 = u_xlat16_4.x * _MainLightShadowParams.x + u_xlat16_38;
    u_xlat16_38 = (u_xlatb32) ? 1.0 : u_xlat16_38;
    u_xlat16_38 = u_xlat16_38 * unity_LightData.z;
    u_xlat16_9.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat16_38 * u_xlat16_9.x;
    u_xlat16_9.xyz = vec3(u_xlat16_38) * _MainLightColor.xyz;
    u_xlat32 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat32 = max(u_xlat32, 1.17549435e-38);
    u_xlat32 = inversesqrt(u_xlat32);
    u_xlat4.xyz = vec3(u_xlat32) * u_xlat5.xyz;
    u_xlat32 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
#else
    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
#endif
    u_xlat23 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat23 * u_xlat23;
    u_xlat16_23 = max(u_xlat16_38, 0.100000001);
    u_xlat32 = u_xlat32 * u_xlat32;
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat32 = u_xlat32 * u_xlat16_4.x + 1.00001001;
    u_xlat32 = u_xlat32 * u_xlat32;
    u_xlat32 = u_xlat16_23 * u_xlat32;
    u_xlat16_23 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat32 = u_xlat32 * u_xlat16_23;
    u_xlat32 = u_xlat16_6.x / u_xlat32;
    u_xlat16_6.x = u_xlat32 + -6.10351563e-05;
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = min(u_xlat16_6.x, 100.0);
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_16.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat2.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD2.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_16;
float u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
mediump float u_xlat16_31;
float u_xlat32;
int u_xlati32;
uint u_xlatu32;
bool u_xlatb32;
mediump float u_xlat16_38;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_0.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat12.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat12.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat12.xyz);
    u_xlat16_31 = dot(u_xlat16_0.xyz, u_xlat12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_16.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_16.x = u_xlat16_16.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_16.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_16.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_12.xyz = u_xlat16_1.xyz * u_xlat16_16.xxx;
    u_xlat23 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat23 = (u_xlatb4.y) ? u_xlat23 : _Metallic;
    u_xlat16_1.x = (-u_xlat23) * 0.959999979 + 0.959999979;
    u_xlat16_11 = (-u_xlat16_1.x) + 1.0;
    u_xlat16_11 = u_xlat16_11 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_16.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_16.xyz = vec3(u_xlat23) * u_xlat16_16.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = vec3(u_xlat16_11) + (-u_xlat16_16.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_16.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_12.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat1.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_9.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_9.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_9.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_1.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_1.yzw;
    u_xlat16_1.yzw = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_38 = dot(u_xlat16_1, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_38 = (-u_xlat16_38) + 4.0;
    u_xlatu32 = uint(u_xlat16_38);
    u_xlati32 = int(int(u_xlatu32) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati32].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb32 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb23 = u_xlat4.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_4.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb32 = u_xlatb32 || u_xlatb23;
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_38 = u_xlat16_4.x * _MainLightShadowParams.x + u_xlat16_38;
    u_xlat16_38 = (u_xlatb32) ? 1.0 : u_xlat16_38;
    u_xlat16_38 = u_xlat16_38 * unity_LightData.z;
    u_xlat16_9.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat16_38 * u_xlat16_9.x;
    u_xlat16_9.xyz = vec3(u_xlat16_38) * _MainLightColor.xyz;
    u_xlat32 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat32 = max(u_xlat32, 1.17549435e-38);
    u_xlat32 = inversesqrt(u_xlat32);
    u_xlat4.xyz = vec3(u_xlat32) * u_xlat5.xyz;
    u_xlat32 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
#else
    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
#endif
    u_xlat23 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat23 * u_xlat23;
    u_xlat16_23 = max(u_xlat16_38, 0.100000001);
    u_xlat32 = u_xlat32 * u_xlat32;
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat32 = u_xlat32 * u_xlat16_4.x + 1.00001001;
    u_xlat32 = u_xlat32 * u_xlat32;
    u_xlat32 = u_xlat16_23 * u_xlat32;
    u_xlat16_23 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat32 = u_xlat32 * u_xlat16_23;
    u_xlat32 = u_xlat16_6.x / u_xlat32;
    u_xlat16_6.x = u_xlat32 + -6.10351563e-05;
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = min(u_xlat16_6.x, 100.0);
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_16.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat2.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    vs_TEXCOORD2.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_16;
float u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
mediump float u_xlat16_31;
float u_xlat32;
int u_xlati32;
uint u_xlatu32;
bool u_xlatb32;
mediump float u_xlat16_38;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_0.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat12.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat12.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat12.xyz);
    u_xlat16_31 = dot(u_xlat16_0.xyz, u_xlat12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = (-u_xlat16_31) + 1.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_16.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_16.x = u_xlat16_16.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_16.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_16.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_12.xyz = u_xlat16_1.xyz * u_xlat16_16.xxx;
    u_xlat23 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat23 = (u_xlatb4.y) ? u_xlat23 : _Metallic;
    u_xlat16_1.x = (-u_xlat23) * 0.959999979 + 0.959999979;
    u_xlat16_11 = (-u_xlat16_1.x) + 1.0;
    u_xlat16_11 = u_xlat16_11 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_16.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_16.xyz = vec3(u_xlat23) * u_xlat16_16.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = vec3(u_xlat16_11) + (-u_xlat16_16.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_16.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_12.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat1.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.w = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_9.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_9.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_9.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_1.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_1.yzw;
    u_xlat16_1.yzw = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_38 = dot(u_xlat16_1, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_38 = (-u_xlat16_38) + 4.0;
    u_xlatu32 = uint(u_xlat16_38);
    u_xlati32 = int(int(u_xlatu32) << 2);
    u_xlat4.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 1)].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati32].xyz * vs_TEXCOORD0.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati32 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(0.0>=u_xlat4.z);
#else
    u_xlatb32 = 0.0>=u_xlat4.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat4.z>=1.0);
#else
    u_xlatb23 = u_xlat4.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat16_4.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb32 = u_xlatb32 || u_xlatb23;
    u_xlat16_38 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_38 = u_xlat16_4.x * _MainLightShadowParams.x + u_xlat16_38;
    u_xlat16_38 = (u_xlatb32) ? 1.0 : u_xlat16_38;
    u_xlat16_38 = u_xlat16_38 * unity_LightData.z;
    u_xlat16_9.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat16_38 * u_xlat16_9.x;
    u_xlat16_9.xyz = vec3(u_xlat16_38) * _MainLightColor.xyz;
    u_xlat32 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat32 = max(u_xlat32, 1.17549435e-38);
    u_xlat32 = inversesqrt(u_xlat32);
    u_xlat4.xyz = vec3(u_xlat32) * u_xlat5.xyz;
    u_xlat32 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
#else
    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
#endif
    u_xlat23 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat16_38 = u_xlat23 * u_xlat23;
    u_xlat16_23 = max(u_xlat16_38, 0.100000001);
    u_xlat32 = u_xlat32 * u_xlat32;
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat32 = u_xlat32 * u_xlat16_4.x + 1.00001001;
    u_xlat32 = u_xlat32 * u_xlat32;
    u_xlat32 = u_xlat16_23 * u_xlat32;
    u_xlat16_23 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat32 = u_xlat32 * u_xlat16_23;
    u_xlat32 = u_xlat16_6.x / u_xlat32;
    u_xlat16_6.x = u_xlat32 + -6.10351563e-05;
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = min(u_xlat16_6.x, 100.0);
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_16.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat2.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    vs_TEXCOORD2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_29;
bool u_xlatb29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_0.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat11.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat11.xyz);
    u_xlat16_28 = dot(u_xlat16_0.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_15.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_15.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_11.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
    u_xlat21 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat21 = (u_xlatb4.y) ? u_xlat21 : _Metallic;
    u_xlat16_1.x = (-u_xlat21) * 0.959999979 + 0.959999979;
    u_xlat16_10.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_10.x = u_xlat16_10.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_15.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_15.xyz = vec3(u_xlat21) * u_xlat16_15.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = u_xlat16_10.xxx + (-u_xlat16_15.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz + u_xlat16_15.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_11.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 1.17549435e-38);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat4.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat16_10.x = u_xlat29 * u_xlat29;
    u_xlat16_29 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat21 = u_xlat21 * u_xlat16_4.x + 1.00001001;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat29 = u_xlat16_29 * u_xlat21;
    u_xlat16_21 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat29 = u_xlat29 * u_xlat16_21;
    u_xlat29 = u_xlat16_10.x / u_xlat29;
    u_xlat16_10.x = u_xlat29 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_15.xyz + u_xlat16_8.xyz;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat0.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat0.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat0.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_6.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb29 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb21 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb29 = u_xlatb29 || u_xlatb21;
    u_xlat16_6.x = (u_xlatb29) ? 1.0 : u_xlat16_6.x;
    u_xlat29 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat29;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    vs_TEXCOORD2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_29;
bool u_xlatb29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_0.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat11.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat11.xyz);
    u_xlat16_28 = dot(u_xlat16_0.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_15.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_15.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_11.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
    u_xlat21 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat21 = (u_xlatb4.y) ? u_xlat21 : _Metallic;
    u_xlat16_1.x = (-u_xlat21) * 0.959999979 + 0.959999979;
    u_xlat16_10.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_10.x = u_xlat16_10.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_15.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_15.xyz = vec3(u_xlat21) * u_xlat16_15.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = u_xlat16_10.xxx + (-u_xlat16_15.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz + u_xlat16_15.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_11.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 1.17549435e-38);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat4.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat16_10.x = u_xlat29 * u_xlat29;
    u_xlat16_29 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat21 = u_xlat21 * u_xlat16_4.x + 1.00001001;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat29 = u_xlat16_29 * u_xlat21;
    u_xlat16_21 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat29 = u_xlat29 * u_xlat16_21;
    u_xlat29 = u_xlat16_10.x / u_xlat29;
    u_xlat16_10.x = u_xlat29 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_15.xyz + u_xlat16_8.xyz;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat0.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat0.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat0.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_6.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb29 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb21 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb29 = u_xlatb29 || u_xlatb21;
    u_xlat16_6.x = (u_xlatb29) ? 1.0 : u_xlat16_6.x;
    u_xlat29 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat29;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    vs_TEXCOORD2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_29;
bool u_xlatb29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_0.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat11.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat11.xyz);
    u_xlat16_28 = dot(u_xlat16_0.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_15.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_15.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_11.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
    u_xlat21 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat21 = (u_xlatb4.y) ? u_xlat21 : _Metallic;
    u_xlat16_1.x = (-u_xlat21) * 0.959999979 + 0.959999979;
    u_xlat16_10.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_10.x = u_xlat16_10.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_15.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_15.xyz = vec3(u_xlat21) * u_xlat16_15.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = u_xlat16_10.xxx + (-u_xlat16_15.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz + u_xlat16_15.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_11.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 1.17549435e-38);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat4.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat16_10.x = u_xlat29 * u_xlat29;
    u_xlat16_29 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat21 = u_xlat21 * u_xlat16_4.x + 1.00001001;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat29 = u_xlat16_29 * u_xlat21;
    u_xlat16_21 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat29 = u_xlat29 * u_xlat16_21;
    u_xlat29 = u_xlat16_10.x / u_xlat29;
    u_xlat16_10.x = u_xlat29 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_15.xyz + u_xlat16_8.xyz;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat0.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat0.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat0.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_6.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb29 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb21 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb29 = u_xlatb29 || u_xlatb21;
    u_xlat16_6.x = (u_xlatb29) ? 1.0 : u_xlat16_6.x;
    u_xlat29 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat29;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    vs_TEXCOORD2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_29;
bool u_xlatb29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_0.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat11.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat11.xyz);
    u_xlat16_28 = dot(u_xlat16_0.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_15.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_15.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_11.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
    u_xlat21 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat21 = (u_xlatb4.y) ? u_xlat21 : _Metallic;
    u_xlat16_1.x = (-u_xlat21) * 0.959999979 + 0.959999979;
    u_xlat16_10.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_10.x = u_xlat16_10.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_15.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_15.xyz = vec3(u_xlat21) * u_xlat16_15.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = u_xlat16_10.xxx + (-u_xlat16_15.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz + u_xlat16_15.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_11.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 1.17549435e-38);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat4.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat16_10.x = u_xlat29 * u_xlat29;
    u_xlat16_29 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat21 = u_xlat21 * u_xlat16_4.x + 1.00001001;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat29 = u_xlat16_29 * u_xlat21;
    u_xlat16_21 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat29 = u_xlat29 * u_xlat16_21;
    u_xlat29 = u_xlat16_10.x / u_xlat29;
    u_xlat16_10.x = u_xlat29 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_15.xyz + u_xlat16_8.xyz;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat0.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat0.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat0.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_6.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb29 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb21 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb29 = u_xlatb29 || u_xlatb21;
    u_xlat16_6.x = (u_xlatb29) ? 1.0 : u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * unity_LightData.z;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    vs_TEXCOORD2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_29;
bool u_xlatb29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_0.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat11.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat11.xyz);
    u_xlat16_28 = dot(u_xlat16_0.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_15.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_15.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_11.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
    u_xlat21 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat21 = (u_xlatb4.y) ? u_xlat21 : _Metallic;
    u_xlat16_1.x = (-u_xlat21) * 0.959999979 + 0.959999979;
    u_xlat16_10.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_10.x = u_xlat16_10.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_15.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_15.xyz = vec3(u_xlat21) * u_xlat16_15.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = u_xlat16_10.xxx + (-u_xlat16_15.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz + u_xlat16_15.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_11.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 1.17549435e-38);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat4.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat16_10.x = u_xlat29 * u_xlat29;
    u_xlat16_29 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat21 = u_xlat21 * u_xlat16_4.x + 1.00001001;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat29 = u_xlat16_29 * u_xlat21;
    u_xlat16_21 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat29 = u_xlat29 * u_xlat16_21;
    u_xlat29 = u_xlat16_10.x / u_xlat29;
    u_xlat16_10.x = u_xlat29 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_15.xyz + u_xlat16_8.xyz;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat0.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat0.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat0.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_6.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb29 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb21 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb29 = u_xlatb29 || u_xlatb21;
    u_xlat16_6.x = (u_xlatb29) ? 1.0 : u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * unity_LightData.z;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    vs_TEXCOORD2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_29;
bool u_xlatb29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_0.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat11.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat11.xyz);
    u_xlat16_28 = dot(u_xlat16_0.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_15.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_15.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_11.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
    u_xlat21 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat21 = (u_xlatb4.y) ? u_xlat21 : _Metallic;
    u_xlat16_1.x = (-u_xlat21) * 0.959999979 + 0.959999979;
    u_xlat16_10.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_10.x = u_xlat16_10.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_15.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_15.xyz = vec3(u_xlat21) * u_xlat16_15.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = u_xlat16_10.xxx + (-u_xlat16_15.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz + u_xlat16_15.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_11.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 1.17549435e-38);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat4.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat16_10.x = u_xlat29 * u_xlat29;
    u_xlat16_29 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat21 = u_xlat21 * u_xlat16_4.x + 1.00001001;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat29 = u_xlat16_29 * u_xlat21;
    u_xlat16_21 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat29 = u_xlat29 * u_xlat16_21;
    u_xlat29 = u_xlat16_10.x / u_xlat29;
    u_xlat16_10.x = u_xlat29 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_15.xyz + u_xlat16_8.xyz;
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat0.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat0.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat4.xyz = vs_TEXCOORD8.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat0.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_6.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb29 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb21 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb29 = u_xlatb29 || u_xlatb21;
    u_xlat16_6.x = (u_xlatb29) ? 1.0 : u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * unity_LightData.z;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    vs_TEXCOORD2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_29;
bool u_xlatb29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_0.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat11.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat11.xyz);
    u_xlat16_28 = dot(u_xlat16_0.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_15.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_15.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_11.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
    u_xlat21 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat21 = (u_xlatb4.y) ? u_xlat21 : _Metallic;
    u_xlat16_1.x = (-u_xlat21) * 0.959999979 + 0.959999979;
    u_xlat16_10.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_10.x = u_xlat16_10.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_15.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_15.xyz = vec3(u_xlat21) * u_xlat16_15.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = u_xlat16_10.xxx + (-u_xlat16_15.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz + u_xlat16_15.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_11.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 1.17549435e-38);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat4.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat16_10.x = u_xlat29 * u_xlat29;
    u_xlat16_29 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat21 = u_xlat21 * u_xlat16_4.x + 1.00001001;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat29 = u_xlat16_29 * u_xlat21;
    u_xlat16_21 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat29 = u_xlat29 * u_xlat16_21;
    u_xlat29 = u_xlat16_10.x / u_xlat29;
    u_xlat16_10.x = u_xlat29 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_15.xyz + u_xlat16_8.xyz;
    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
    u_xlat16_29 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_29 * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb29 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb21 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb29 = u_xlatb29 || u_xlatb21;
    u_xlat16_6.x = (u_xlatb29) ? 1.0 : u_xlat16_6.x;
    u_xlat29 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat29;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    vs_TEXCOORD2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_29;
bool u_xlatb29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_0.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat11.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat11.xyz);
    u_xlat16_28 = dot(u_xlat16_0.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_15.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_15.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_11.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
    u_xlat21 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat21 = (u_xlatb4.y) ? u_xlat21 : _Metallic;
    u_xlat16_1.x = (-u_xlat21) * 0.959999979 + 0.959999979;
    u_xlat16_10.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_10.x = u_xlat16_10.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_15.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_15.xyz = vec3(u_xlat21) * u_xlat16_15.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = u_xlat16_10.xxx + (-u_xlat16_15.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz + u_xlat16_15.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_11.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 1.17549435e-38);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat4.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat16_10.x = u_xlat29 * u_xlat29;
    u_xlat16_29 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat21 = u_xlat21 * u_xlat16_4.x + 1.00001001;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat29 = u_xlat16_29 * u_xlat21;
    u_xlat16_21 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat29 = u_xlat29 * u_xlat16_21;
    u_xlat29 = u_xlat16_10.x / u_xlat29;
    u_xlat16_10.x = u_xlat29 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_15.xyz + u_xlat16_8.xyz;
    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
    u_xlat16_29 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_29 * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb29 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb21 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb29 = u_xlatb29 || u_xlatb21;
    u_xlat16_6.x = (u_xlatb29) ? 1.0 : u_xlat16_6.x;
    u_xlat29 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat29;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    vs_TEXCOORD2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_29;
bool u_xlatb29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_0.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat11.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat11.xyz);
    u_xlat16_28 = dot(u_xlat16_0.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_15.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_15.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_11.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
    u_xlat21 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat21 = (u_xlatb4.y) ? u_xlat21 : _Metallic;
    u_xlat16_1.x = (-u_xlat21) * 0.959999979 + 0.959999979;
    u_xlat16_10.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_10.x = u_xlat16_10.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_15.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_15.xyz = vec3(u_xlat21) * u_xlat16_15.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = u_xlat16_10.xxx + (-u_xlat16_15.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz + u_xlat16_15.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_11.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 1.17549435e-38);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat4.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat16_10.x = u_xlat29 * u_xlat29;
    u_xlat16_29 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat21 = u_xlat21 * u_xlat16_4.x + 1.00001001;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat29 = u_xlat16_29 * u_xlat21;
    u_xlat16_21 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat29 = u_xlat29 * u_xlat16_21;
    u_xlat29 = u_xlat16_10.x / u_xlat29;
    u_xlat16_10.x = u_xlat29 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_15.xyz + u_xlat16_8.xyz;
    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
    u_xlat16_29 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_29 * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb29 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb21 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb29 = u_xlatb29 || u_xlatb21;
    u_xlat16_6.x = (u_xlatb29) ? 1.0 : u_xlat16_6.x;
    u_xlat29 = unity_LightData.z * unity_ProbesOcclusion.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat29;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    vs_TEXCOORD2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_29;
bool u_xlatb29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_0.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat11.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat11.xyz);
    u_xlat16_28 = dot(u_xlat16_0.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_15.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_15.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_11.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
    u_xlat21 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat21 = (u_xlatb4.y) ? u_xlat21 : _Metallic;
    u_xlat16_1.x = (-u_xlat21) * 0.959999979 + 0.959999979;
    u_xlat16_10.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_10.x = u_xlat16_10.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_15.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_15.xyz = vec3(u_xlat21) * u_xlat16_15.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = u_xlat16_10.xxx + (-u_xlat16_15.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz + u_xlat16_15.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_11.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 1.17549435e-38);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat4.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat16_10.x = u_xlat29 * u_xlat29;
    u_xlat16_29 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat21 = u_xlat21 * u_xlat16_4.x + 1.00001001;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat29 = u_xlat16_29 * u_xlat21;
    u_xlat16_21 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat29 = u_xlat29 * u_xlat16_21;
    u_xlat29 = u_xlat16_10.x / u_xlat29;
    u_xlat16_10.x = u_xlat29 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_15.xyz + u_xlat16_8.xyz;
    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
    u_xlat16_29 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_29 * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb29 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb21 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb29 = u_xlatb29 || u_xlatb21;
    u_xlat16_6.x = (u_xlatb29) ? 1.0 : u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * unity_LightData.z;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    vs_TEXCOORD2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_29;
bool u_xlatb29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_0.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat11.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat11.xyz);
    u_xlat16_28 = dot(u_xlat16_0.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_15.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_15.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_11.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
    u_xlat21 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat21 = (u_xlatb4.y) ? u_xlat21 : _Metallic;
    u_xlat16_1.x = (-u_xlat21) * 0.959999979 + 0.959999979;
    u_xlat16_10.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_10.x = u_xlat16_10.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_15.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_15.xyz = vec3(u_xlat21) * u_xlat16_15.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = u_xlat16_10.xxx + (-u_xlat16_15.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz + u_xlat16_15.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_11.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 1.17549435e-38);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat4.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat16_10.x = u_xlat29 * u_xlat29;
    u_xlat16_29 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat21 = u_xlat21 * u_xlat16_4.x + 1.00001001;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat29 = u_xlat16_29 * u_xlat21;
    u_xlat16_21 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat29 = u_xlat29 * u_xlat16_21;
    u_xlat29 = u_xlat16_10.x / u_xlat29;
    u_xlat16_10.x = u_xlat29 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_15.xyz + u_xlat16_8.xyz;
    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
    u_xlat16_29 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_29 * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb29 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb21 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb29 = u_xlatb29 || u_xlatb21;
    u_xlat16_6.x = (u_xlatb29) ? 1.0 : u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * unity_LightData.z;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    vs_TEXCOORD2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD2.w = in_TANGENT0.w;
    vs_TEXCOORD3 = in_TEXCOORD0;
    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);
    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _BumpMap;
UNITY_LOCATION(4) uniform mediump sampler2D _MetallicGlossMap;
UNITY_LOCATION(5) uniform mediump sampler2D _SpecGlossMap;
UNITY_LOCATION(6) uniform mediump sampler2D _EmissionMap;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
bvec3 u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_29;
bool u_xlatb29;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0<vs_TEXCOORD2.w);
#else
    u_xlatb0 = 0.0<vs_TEXCOORD2.w;
#endif
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat16_1.x = u_xlat0.x * unity_WorldTransformParams.w;
    u_xlat0.xyz = vs_TEXCOORD1.zxy * vs_TEXCOORD2.yzx;
    u_xlat0.xyz = vs_TEXCOORD1.yzx * vs_TEXCOORD2.zxy + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xzy * u_xlat16_1.xxx;
    u_xlat2.y = u_xlat0.x;
    u_xlat2.x = vs_TEXCOORD2.x;
    u_xlat2.z = vs_TEXCOORD1.x;
    u_xlat3.xy = vs_TEXCOORD3.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat16_4.xyz = texture(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseNormalMap, _UseMetallicMap, _UseRoughnessMap, _UseNormalMap)).xyz;
    u_xlat5.xyz = (u_xlatb4.x) ? u_xlat16_1.xyz : vec3(0.0, 0.0, 1.0);
    u_xlat16_1.x = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.y = u_xlat0.z;
    u_xlat2.x = vs_TEXCOORD2.y;
    u_xlat2.z = vs_TEXCOORD1.y;
    u_xlat16_1.y = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat0.x = vs_TEXCOORD2.z;
    u_xlat0.z = vs_TEXCOORD1.z;
    u_xlat16_1.z = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat16_28 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_0.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = max(u_xlat2.x, 1.17549435e-38);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = vs_TEXCOORD4.xyz * u_xlat2.xxx + _MainLightPosition.xyz;
    u_xlat16_1.x = dot((-u_xlat11.xyz), u_xlat16_0.xyz);
    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_0.xyz * (-u_xlat16_1.xxx) + (-u_xlat11.xyz);
    u_xlat16_28 = dot(u_xlat16_0.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat2.x = texture(_SpecGlossMap, u_xlat3.xy).x;
    u_xlat2.x = (u_xlatb4.z) ? u_xlat2.x : _Glossiness;
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat16_6.x = (-u_xlat2.x) + 1.0;
    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_6.x = max(u_xlat16_6.x, 6.10351563e-05);
    u_xlat16_15.x = u_xlat16_15.x * 6.0;
    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, u_xlat16_15.x);
    u_xlat16_1.x = u_xlat16_7.w + -1.0;
    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.y;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx;
    u_xlat16_15.x = u_xlat16_6.x * u_xlat16_6.x + 1.0;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_11.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
    u_xlat21 = texture(_MetallicGlossMap, u_xlat3.xy).x;
    u_xlat21 = (u_xlatb4.y) ? u_xlat21 : _Metallic;
    u_xlat16_1.x = (-u_xlat21) * 0.959999979 + 0.959999979;
    u_xlat16_10.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_10.x = u_xlat16_10.x + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyw = texture(_EmissionMap, u_xlat3.xy).xyz;
    u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat4.xyz : _Color.xyz;
    u_xlat16_15.xyz = u_xlat4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat4.xyz;
    u_xlat16_15.xyz = vec3(u_xlat21) * u_xlat16_15.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_1.xyz = u_xlat16_10.xxx + (-u_xlat16_15.xyz);
    u_xlat16_1.xyz = vec3(u_xlat16_28) * u_xlat16_1.xyz + u_xlat16_15.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_11.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_1.x = dot(unity_SHAr, u_xlat16_0);
    u_xlat16_1.y = dot(unity_SHAg, u_xlat16_0);
    u_xlat16_1.z = dot(unity_SHAb, u_xlat16_0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD6.xyz;
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 1.17549435e-38);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat4.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(_MainLightPosition.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_1.x = dot(u_xlat16_0.xyz, _MainLightPosition.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat16_10.x = u_xlat29 * u_xlat29;
    u_xlat16_29 = max(u_xlat16_10.x, 0.100000001);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_6.x + -1.0;
    u_xlat21 = u_xlat21 * u_xlat16_4.x + 1.00001001;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat29 = u_xlat16_29 * u_xlat21;
    u_xlat16_21 = u_xlat16_6.x * 4.0 + 2.0;
    u_xlat16_10.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat29 = u_xlat29 * u_xlat16_21;
    u_xlat29 = u_xlat16_10.x / u_xlat29;
    u_xlat16_10.x = u_xlat29 + -6.10351563e-05;
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = min(u_xlat16_10.x, 100.0);
    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_15.xyz + u_xlat16_8.xyz;
    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
    u_xlat16_29 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_29 * _MainLightShadowParams.x + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0>=vs_TEXCOORD8.z);
#else
    u_xlatb29 = 0.0>=vs_TEXCOORD8.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vs_TEXCOORD8.z>=1.0);
#else
    u_xlatb21 = vs_TEXCOORD8.z>=1.0;
#endif
    u_xlatb29 = u_xlatb29 || u_xlatb21;
    u_xlat16_6.x = (u_xlatb29) ? 1.0 : u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_6.x * unity_LightData.z;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;
    u_xlat16_1.xyz = u_xlat16_10.xyz * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseEmissiveMap);
#endif
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyw : _EmissionColor.xyz;
    SV_TARGET0.xyz = u_xlat16_1.xyz + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat2.x = (u_xlatb2) ? u_xlat4.w : _Opacity;
    SV_TARGET0.w = u_xlat2.x;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_OFF" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTMAP_ON" "_ADDITIONAL_OFF" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ADDITIONAL_OFF" "_MAIN_LIGHT_SHADOWS" }
""
}
}
}
 Pass {
  Name "ShadowCaster"
  Tags { "LIGHTMODE" = "SHADOWCASTER" "QUEUE" = "Transparent+0" "RenderPipeline" = "UniversalPipeline" "RenderType" = "Transparent" }
  Blend SrcAlpha OneMinusSrcAlpha, One OneMinusSrcAlpha
  GpuProgramID 115560
Program "vp" {
SubProgram "gles hw_tier00 " {
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ShadowBias;
uniform 	vec3 _LightDirection;
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat6 * _ShadowBias.y;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position.z = max((-u_xlat0.w), u_xlat0.z);
    gl_Position.xyw = u_xlat0.xyw;
    vs_TEXCOORD0 = in_TEXCOORD0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_TARGET0 gl_FragData[0]
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ShadowBias;
uniform 	vec3 _LightDirection;
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat6 * _ShadowBias.y;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position.z = max((-u_xlat0.w), u_xlat0.z);
    gl_Position.xyw = u_xlat0.xyw;
    vs_TEXCOORD0 = in_TEXCOORD0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_TARGET0 gl_FragData[0]
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ShadowBias;
uniform 	vec3 _LightDirection;
attribute highp vec3 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat6 * _ShadowBias.y;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position.z = max((-u_xlat0.w), u_xlat0.z);
    gl_Position.xyw = u_xlat0.xyw;
    vs_TEXCOORD0 = in_TEXCOORD0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_TARGET0 gl_FragData[0]
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ShadowBias;
uniform 	vec3 _LightDirection;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat6 * _ShadowBias.y;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position.z = max((-u_xlat0.w), u_xlat0.z);
    gl_Position.xyw = u_xlat0.xyw;
    vs_TEXCOORD0 = in_TEXCOORD0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
layout(location = 0) out mediump vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ShadowBias;
uniform 	vec3 _LightDirection;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat6 * _ShadowBias.y;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position.z = max((-u_xlat0.w), u_xlat0.z);
    gl_Position.xyw = u_xlat0.xyw;
    vs_TEXCOORD0 = in_TEXCOORD0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
layout(location = 0) out mediump vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ShadowBias;
uniform 	vec3 _LightDirection;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat6 * _ShadowBias.y;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position.z = max((-u_xlat0.w), u_xlat0.z);
    gl_Position.xyw = u_xlat0.xyw;
    vs_TEXCOORD0 = in_TEXCOORD0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
layout(location = 0) out mediump vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
}
}
 Pass {
  Name "DepthOnly"
  Tags { "LIGHTMODE" = "DepthOnly" "QUEUE" = "Transparent+0" "RenderPipeline" = "UniversalPipeline" "RenderType" = "Transparent" }
  Blend SrcAlpha OneMinusSrcAlpha, One OneMinusSrcAlpha
  ColorMask 0 0
  GpuProgramID 189352
Program "vp" {
SubProgram "gles hw_tier00 " {
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = in_TEXCOORD0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_TARGET0 gl_FragData[0]
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = in_TEXCOORD0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_TARGET0 gl_FragData[0]
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = in_TEXCOORD0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_TARGET0 gl_FragData[0]
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = in_TEXCOORD0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
layout(location = 0) out mediump vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = in_TEXCOORD0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
layout(location = 0) out mediump vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = in_TEXCOORD0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
layout(location = 0) out mediump vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
}
}
 Pass {
  Tags { "LIGHTMODE" = "Universal2D" "QUEUE" = "Transparent+0" "RenderPipeline" = "UniversalPipeline" "RenderType" = "Transparent" }
  Blend SrcAlpha OneMinusSrcAlpha, One OneMinusSrcAlpha
  ZWrite Off
  GpuProgramID 269529
Program "vp" {
SubProgram "gles hw_tier00 " {
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = in_TEXCOORD0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
varying highp vec4 vs_TEXCOORD0;
#define SV_TARGET0 gl_FragData[0]
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
void main()
{
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat1 = texture2D(_MainTex, u_xlat2.xy);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.xyz : _Color.xyz;
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.w = (u_xlatb1) ? u_xlat1.w : _Opacity;
    SV_TARGET0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = in_TEXCOORD0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
varying highp vec4 vs_TEXCOORD0;
#define SV_TARGET0 gl_FragData[0]
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
void main()
{
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat1 = texture2D(_MainTex, u_xlat2.xy);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.xyz : _Color.xyz;
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.w = (u_xlatb1) ? u_xlat1.w : _Opacity;
    SV_TARGET0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec3 in_POSITION0;
attribute highp vec4 in_TEXCOORD0;
varying highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = in_TEXCOORD0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	float _UseColorMap;
uniform 	vec4 _Color;
uniform 	float _UseOpacityMap;
uniform 	float _Opacity;
uniform 	vec2 _UvOffset;
uniform 	vec2 _UvTiling;
uniform lowp sampler2D _MainTex;
varying highp vec4 vs_TEXCOORD0;
#define SV_TARGET0 gl_FragData[0]
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
void main()
{
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat1 = texture2D(_MainTex, u_xlat2.xy);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.xyz : _Color.xyz;
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
    u_xlat0.w = (u_xlatb1) ? u_xlat1.w : _Opacity;
    SV_TARGET0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = in_TEXCOORD0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat1 = texture(_MainTex, u_xlat2.xy);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.xyz : _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.w = (u_xlatb1) ? u_xlat1.w : _Opacity;
    SV_TARGET0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = in_TEXCOORD0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat1 = texture(_MainTex, u_xlat2.xy);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.xyz : _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.w = (u_xlatb1) ? u_xlat1.w : _Opacity;
    SV_TARGET0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec3 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = in_TEXCOORD0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _UseColorMap;
	UNITY_UNIFORM vec4 _Color;
	UNITY_UNIFORM float _UseNormalMap;
	UNITY_UNIFORM float _UseMetallicMap;
	UNITY_UNIFORM float _Metallic;
	UNITY_UNIFORM float _UseRoughnessMap;
	UNITY_UNIFORM float _Glossiness;
	UNITY_UNIFORM float _UseEmissiveMap;
	UNITY_UNIFORM vec4 _EmissionColor;
	UNITY_UNIFORM float _UseOpacityMap;
	UNITY_UNIFORM float _Opacity;
	UNITY_UNIFORM vec2 _UvOffset;
	UNITY_UNIFORM vec2 _UvTiling;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec2 u_xlat2;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseColorMap);
#endif
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvTiling.xy + vec2(_UvOffset.x, _UvOffset.y);
    u_xlat1 = texture(_MainTex, u_xlat2.xy);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.xyz : _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseOpacityMap);
#endif
    u_xlat0.w = (u_xlatb1) ? u_xlat1.w : _Opacity;
    SV_TARGET0 = u_xlat0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
}
}
}
Fallback "Hidden/Shader Graph/FallbackError"
CustomEditor "UnityEditor.ShaderGraph.PBRMasterGUI"
}